<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog-revision</title>
    <url>/Blog-revision/</url>
    <content><![CDATA[<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul>
<li>能发布到个人博客里面的一定是完整的，具有借鉴、回顾价值的内容。</li>
</ul>
<h2 id="修订"><a href="#修订" class="headerlink" title="修订"></a>修订</h2><ul>
<li>2023-9-21： 调整了所有博客内容中的markdown语法问题。</li>
<li>2023-9-21： 删除了git-note，i2c-note，docTools，QR-code，rtos-issue等内容。因为内容不完整，全部移到gitbook中，需要后续补齐后更新。</li>
<li>2023-9-21:  删除了History文档，因为hexo并不方便持续更新。作为点滴记录还是本地先写，然后有空再一起同步到hexo-blog中。关于现在的History内容本意是记录一些自己觉得重要的事件。</li>
<li>2023-10-20： 添加powershell外观优化过程 powershell-docoration</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Markdown basical syntax</title>
    <url>/Markdown-basical-syntax/</url>
    <content><![CDATA[<h2 id="换行、段落"><a href="#换行、段落" class="headerlink" title="换行、段落"></a>换行、段落</h2><blockquote>
<p>换行：两个空格<br>段落： 一行空行</p>
</blockquote>
<h2 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">** text ** </span><br><span class="line"> * text * </span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p><strong>note</strong> : <em>注意markdown中的符号后面的空格</em></p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">1. xxx</span><br><span class="line">2. xxx</span><br><span class="line">3. xxx</span><br></pre></td></tr></tbody></table></figure>

<h2 id="链接、图片"><a href="#链接、图片" class="headerlink" title="链接、图片"></a>链接、图片</h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">链接[source](link "description")</span><br><span class="line">图片 ![](path "title")</span><br></pre></td></tr></tbody></table></figure>

<h2 id="转义字符-‘-‘"><a href="#转义字符-‘-‘" class="headerlink" title="转义字符 ‘\‘"></a>转义字符 ‘\‘</h2><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure>

<p>单元格合并 ：<br>属于markdown扩展语法，需要markdown渲染器的支持，不支持没效果，记录一下，万一以后支持呢。</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 或 空 ： 横向框合并</span><br><span class="line">    ^ : 纵向框合并 ```</span><br><span class="line">表格工具： [点击试用](https://kz16.top/ckeditor/)</span><br><span class="line"></span><br><span class="line">## 代码</span><br><span class="line"></span><br><span class="line">&gt; 行内插入代码 ： \` code \`</span><br><span class="line">&gt; 多行代码：</span><br><span class="line">&gt; - \`\`\` code  \`\`\`</span><br><span class="line">&gt; - 四个空格或者tab缩进</span><br><span class="line"></span><br><span class="line">代码进行语法高亮</span><br><span class="line">&gt;\`\`\` python  </span><br><span class="line">&gt; python code</span><br><span class="line">&gt;\`\`\`  </span><br><span class="line"></span><br><span class="line">即在\`\`\`后标明 code的语言  </span><br><span class="line"></span><br><span class="line">## Emoji</span><br><span class="line"></span><br><span class="line">` :joy: ` </span><br><span class="line"></span><br><span class="line">示例： 这是开心的表情 :joy:    </span><br><span class="line">如果上面没有出现表情，说明渲染器不支持emoji的渲染。需要安装额外插件</span><br><span class="line">更多表情简码列表，[点击这里](https://gist.github.com/rxaviers/7360908)</span><br><span class="line"></span><br><span class="line">## 改变字体颜色</span><br><span class="line"></span><br><span class="line">markdown不支持改变字体颜色，但是支持html语法  </span><br><span class="line">通过`&lt;font color=green size=7 face="黑体"&gt; font &lt;/font&gt;`</span><br><span class="line"></span><br><span class="line">## 公式</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">$公式$  #行内插入</span><br><span class="line">$$公式$$ # 单独一行 </span><br></pre></td></tr></tbody></table></figure>

<p>$$ f(x)=sin(x)$$<br>如果上述公式看不到效果，检查markdown编辑器或者渲染插件是否安装了math插件。</p>
<p>公式工具：<a href="https://kz16.top/latex/symbol/">点击使用</a><br>公式速查：</p>
<h2 id="flowchart"><a href="#flowchart" class="headerlink" title="flowchart"></a>flowchart</h2><p>能看到flowchart的前提是有解析工具，比如 markdown preview插件，提前生成，才能看到<br>hexo主题需要额外安装flowchart插件以支持渲染。</p>
<p>markdown图表类型支持： 流程图(mermaid/flow)、时序图(sequence)、甘特图(mermaid)<br>语法：(需要在开头注明mermaid类型,此处被自动省略)</p>
<pre class="mermaid">st=&gt;start: 开始框
op=&gt;operation: 处理框
cond=&gt;condition: 判断框(是或否?)
sub1=&gt;subroutine: 子流程
io=&gt;inputoutput: 输入输出框
e=&gt;end: 结束框
st(right)-&gt;op(right)-&gt;cond
cond(yes)-&gt;io(bottom)-&gt;e
cond(no)-&gt;sub1(right)-&gt;op</pre>

<p>可以看出语法繁琐，记得很多。<br>下面是mermaid插件提供的语法</p>
<pre class="mermaid">graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件a}
    C --&gt;|a=1| D[结果1]
    C --&gt;|a=2| E[结果2]
    F[横向流程图]</pre>

<p>更多：<br><a href="https://zhuanlan.zhihu.com/p/355997933">用mermaid画图</a></p>
<p>效果:</p>
<pre class="mermaid">graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件a}
    C --&gt;|a=1| D[结果1]
    C --&gt;|a=2| E[结果2]
    F[横向流程图]</pre>

<pre class="mermaid">pie
    title 为什么总是宅在家里？
    "喜欢宅" : 15
    "天气太热或太冷" : 20
    "穷" : 500</pre>

<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a><em><strong>reference</strong></em></h2><p>其他的汇总：</p>
<ul>
<li><a href="https://markdown.com.cn/">官方docs</a></li>
<li><a href="https://kz16.top/md/#markdown%E7%BB%88%E6%9E%81%E6%95%99%E7%A8%8B">终极教程</a></li>
<li><a href="https://www.runoob.com/markdown/md-advance.html">runnoob菜鸟教程高级技巧</a></li>
</ul>
<blockquote class="blockquote-center">
<p>中国人很擅长抽象， 化繁为简是好事，但总会丢了灵魂<br>都是知道了该怎么做就开始抽象。而不是知道了为什么这么做再开始抽象。浮躁。 说到底，还是把握不住精髓。</p>

</blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>IPC</title>
    <url>/IPC/</url>
    <content><![CDATA[<h1 id="IPC-简介"><a href="#IPC-简介" class="headerlink" title="IPC 简介"></a>IPC 简介</h1><p>IPC which is referred to “inter-processor communication” is a means of collaboration that software runs on diffrent CPUs communicate with each other.  </p>
<p>IPC(inter-processor communication) 旨在解决不同CPU之间软件的通信问题。</p>
<p>实现方式针对linux和rtos主要分为两大部分：</p>
<ol>
<li>PDK IPC LLD driver for RTOS, this consists of RPMSG, VRING and HW Mailbox driver.</li>
<li>Linux kernel IPC driver suite for Linux, this consists of RPMSG CHAR, RPMSG, VRING and HW Mailbox driver.</li>
</ol>
<p>对应的结构如下：</p>
<table>
<thead>
<tr>
<th align="center">IPC SW layer</th>
<th align="left">Decription</th>
</tr>
</thead>
<tbody><tr>
<td align="center">application</td>
<td align="left">发送接收IPC消息</td>
</tr>
<tr>
<td align="center">RPMSG CHAR</td>
<td align="left">[ONLY in LINUX] 提供给应用调用的用户态接口</td>
</tr>
<tr>
<td align="center">RPMSG</td>
<td align="left">SW protocol and interface 用来在目标CPU上的endpoints交换信息</td>
</tr>
<tr>
<td align="center">VRING</td>
<td align="left">基于 SW queue 实现的 shared memory，用来暂存两个CPU通信时的消息</td>
</tr>
<tr>
<td align="center">HW mailbox</td>
<td align="left">硬件机制，用来在两个CPUS之间通信时发送中断提醒</td>
</tr>
</tbody></table>
<p>下面详细讲解。</p>
<h1 id="通信框架"><a href="#通信框架" class="headerlink" title="通信框架"></a>通信框架</h1><p><img src="/IPC/RPMSG_VRING_DATA_FLOW.png" alt="RPMSG_VRING_DATA_FLOW"><br>rpmsg–&gt; endpoint –&gt; vring&amp; mailbox –&gt; endpoint –&gt; rpmsg</p>
<h2 id="endpoint"><a href="#endpoint" class="headerlink" title="endpoint"></a>endpoint</h2><p>tiovx_rpmsg_port_id = APP_IPC_TIOVX_RPMSG_PORT_ID(14)<br>RPMessage_announce<br>appIpcCreateRpmsgRxTask<br>service name , interrupt name</p>
<h2 id="RPMSG-CHAR"><a href="#RPMSG-CHAR" class="headerlink" title="RPMSG CHAR"></a>RPMSG CHAR</h2><p>linux –&gt; mcu<br>appIpcCreateTxCh</p>
<h2 id="RPMSG"><a href="#RPMSG" class="headerlink" title="RPMSG"></a>RPMSG</h2><p>mcu –&gt; linux</p>
<h2 id="VRING"><a href="#VRING" class="headerlink" title="VRING"></a>VRING</h2><p>shared memory</p>
<h2 id="HW-mailbox"><a href="#HW-mailbox" class="headerlink" title="HW mailbox"></a>HW mailbox</h2><p><img src="/IPC/MAILBOX_INTEGRATION.png" alt="mailbox integration"></p>
<p><img src="/IPC/HW_MAILBOX_QUEUES.png" alt="HW_MAILBOX_QUEUES"></p>
<ul>
<li><p>why linux can communicate with five cores ?<br>mcu10 , mcu20,mcu21, c7x1,c7x2</p>
</li>
<li><p>send sequence</p>
</li>
</ul>
<p>user mannul<br><img src="/IPC/MAILBOX_INTERAL_BLOCK_DIAGRAM.png" alt="mailbox interal block diagram"></p>
<p><img src="/IPC/example_of_communication.png" alt="example of communication"></p>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MPU1_0  ( 0u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MCU1_0  ( 1u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MCU1_1  ( 2u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MCU2_0  ( 3u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MCU2_1  ( 4u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MCU3_0  ( 5u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MCU3_1  ( 6u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_C7x_1   ( 7u)</span></span><br><span class="line"><span class="comment">/** \brief CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_C7x_2   ( 8u)</span></span><br><span class="line"><span class="comment">/** \brief Max CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_MAX     ( 9u)</span></span><br><span class="line"><span class="comment">/** \brief Invalid CPU ID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_IPC_CPU_INVALID (0xFFu)</span></span><br></pre></td></tr></tbody></table></figure>

<p>app_cfg.h  enable/disable control</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ENABLE_IPC_MPU1_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENABLE_IPC_MCU1_0</span></span><br><span class="line"><span class="comment">//#define ENABLE_IPC_MCU1_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENABLE_IPC_MCU2_0</span></span><br><span class="line"><span class="comment">// #define ENABLE_IPC_MCU2_1</span></span><br><span class="line"><span class="comment">//#define ENABLE_IPC_MCU3_0</span></span><br><span class="line"><span class="comment">//#define ENABLE_IPC_MCU3_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENABLE_IPC_C7x_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENABLE_IPC_C7x_2</span></span><br></pre></td></tr></tbody></table></figure>

<p>运行之后：<br><img src="/IPC/enabled_cpu_by_default.png" alt="enabled_cpu_by_default"><br>ipc_for_linux</p>
<h2 id="ipc-for-rtos"><a href="#ipc-for-rtos" class="headerlink" title="ipc_for_rtos"></a>ipc_for_rtos</h2><h1 id="实现内容"><a href="#实现内容" class="headerlink" title="实现内容"></a>实现内容</h1><h2 id="RPMessage-send"><a href="#RPMessage-send" class="headerlink" title="RPMessage_send()"></a>RPMessage_send()</h2><p>RPMessage_recv()</p>
<p>RPMessage_announce<br>appIpcCreateRpmsgRxTask</p>
<h2 id="endpoint-1"><a href="#endpoint-1" class="headerlink" title="endpoint"></a>endpoint</h2><p>流程<br>与mailbox联动</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul>
<li><a href="https://software-dl.ti.com/jacinto7/esd/processor-sdk-rtos-jacinto7/latest/exports/docs/psdk_rtos/docs/user_guide/developer_notes_ipc.html">RTOS USER-GUIDE: 8.4.Developing IPC applications</a></li>
<li><a href="https://software-dl.ti.com/jacinto7/esd/processor-sdk-rtos-jacinto7/latest/exports/docs/pdk_jacinto_09_00_00_45/docs/apiguide/j721e/html/group__DRV__IPC__CFG__MODULE.html">PDK API Guide for J721E - IPC Driver</a></li>
<li>User Mannul - mailbox</li>
<li>rtos code - IPC module</li>
</ul>
]]></content>
      <categories>
        <category>TDA4</category>
      </categories>
      <tags>
        <tag>TDA4</tag>
        <tag>IPC</tag>
        <tag>mailbox</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo blog SEO configure</title>
    <url>/hexo-blog-SEO-configure/</url>
    <content><![CDATA[<h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><p>SEO(Search Engine Optimization) 针对搜索引擎的优化。<br>意义是让我们的博客能被通过搜索引擎查询相关问题的人更容易看到浏览。(换句话说，没有这方面需求的人可以忽略)  </p>
<p>我没有相关的需求，玩的就是一个收藏。毕竟写博客主要目的是技术积累，以及和朋友的谈资  : )<br>至于博客里面甚至留了bitcoin的打赏二维码，相信我，那只是为了好玩。 : )  </p>
<p>出于对技术的热爱角度，也来学习一下，万一以后能用到呢。所以没有和hexo博客搭建写在一起，而是单独另起一篇细细的看下，有用的记录下。<br>如果你有缘看到了，那就一起学习下有哪些方式吧。</p>
<h2 id="添加搜索引擎的认证"><a href="#添加搜索引擎的认证" class="headerlink" title="添加搜索引擎的认证"></a>添加搜索引擎的认证</h2><h2 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h2><h2 id="优化目录结构"><a href="#优化目录结构" class="headerlink" title="优化目录结构"></a>优化目录结构</h2><p>修改站点配置文件<code>_config.yml--&gt; permalink</code></p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">permalink: :year:month:day/:title/</span><br></pre></td></tr></tbody></table></figure>

<p>or</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">permalink: :title.html</span><br></pre></td></tr></tbody></table></figure>

<p>从而改变博客的目录结构</p>
<h2 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h2><p>网页的代码存在大量空白符，压缩代码可以提高网站被访问速度。</p>
<p>安装插件： <code>npm install hexo-neat --save</code>  </p>
<p>修改<em>站点配置文件</em>：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line"># 开启压缩</span><br><span class="line">neat_enable: true</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - '**/*.min.css'</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - '**/*.min.js'</span><br><span class="line">    - '**/index.js'</span><br></pre></td></tr></tbody></table></figure>

<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><ul>
<li>知乎： <a href="https://zhuanlan.zhihu.com/p/344927945">hexo博客高级优化</a>  </li>
<li>NexT： <a href="https://theme-next.js.org/docs/theme-settings/seo">SEO|NexT</a></li>
</ul>
<blockquote class="blockquote-center">
<p>永远拥抱开放，拥抱自由，where we stands as who we are</p>

</blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>SEO</tag>
        <tag>next-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Ideas</title>
    <url>/ideas/</url>
    <content><![CDATA[<h2 id="智能红绿灯"><a href="#智能红绿灯" class="headerlink" title="智能红绿灯"></a>智能红绿灯</h2><ul>
<li>多车道识别</li>
<li>车辆识别—用于变灯判断</li>
<li>多路口红绿灯连接—用于潮汐车道。</li>
</ul>
<h2 id="车车互联"><a href="#车车互联" class="headerlink" title="车车互联"></a>车车互联</h2><p>车车娱乐系统<br>场景： 提前预警； 信息互通</p>
<h2 id="密码管理平台"><a href="#密码管理平台" class="headerlink" title="密码管理平台"></a>密码管理平台</h2><ol>
<li><p>通过手机号码掌管所有已注册的应用或平台</p>
</li>
<li><p>隐私管理， 手机号码多一层加密，对应用或平台进行隐藏</p>
</li>
<li><p>记录所有平台的密码, 支持一键修改</p>
</li>
<li><p><strong>如何更好的记住密码，方便查询密码</strong></p>
</li>
</ol>
<h2 id="不同平台互联，传输文件开始"><a href="#不同平台互联，传输文件开始" class="headerlink" title="不同平台互联，传输文件开始"></a>不同平台互联，传输文件开始</h2><p>windows跟手机传输文件，只能通过第三方软件的文件传输功能，手机发送文件到文件传输，windows打开软件文件传输接收文件，然后另存问到windows<br>这样很烦， iphone的 隔空传送其实任何平台都应该支持。</p>
<h2 id="针对小公司的云存储平台"><a href="#针对小公司的云存储平台" class="headerlink" title="针对小公司的云存储平台"></a>针对小公司的云存储平台</h2><p>bg：小公司缺乏技术人员，文件保存杂乱，可追溯性差， 公司的积累事倍功半。<br>客户信息，交易记录，经验积累等生产资料。这些丢失对于一个公司的损失很惨重。<br>我认为任何正常的小公司需要一个存储重要文件的地方。还可以有效的分类管理，方便查找和预览。</p>
<h2 id="通识知识娱乐化"><a href="#通识知识娱乐化" class="headerlink" title="通识知识娱乐化"></a>通识知识娱乐化</h2><p>受启发于 freecodecamp.org 该组织致力于将编程知识模块化，做成可实操可视的形式，大大提高了学习兴趣和效率。<br>将大学教材里面的 数学，物理各种理科知识用生动的形式展现，方便学习。<br>这种形式不局限于 动画，视频，游戏，模拟界面，重在让学习者学的过程轻松，激发兴趣，记忆深刻。<br>知识内容可以延伸到从幼儿园，和小学教材开始。积攒人气和投资。<br>把死板的知识变得生动。刺激教育改革。</p>
<ul>
<li>知识培训系统框架： 支持文本，gif，互动视频媒介操作，编译器&amp; 编辑器。</li>
</ul>
<h2 id="AR-产品"><a href="#AR-产品" class="headerlink" title="AR 产品"></a>AR 产品</h2><p>终极目标，希望能把AR真的落实到实际应用。让人们用的起，用的便捷。<br>比如，如同普通眼镜带头显功能，带扫描功能，带存储和回放功能。</p>
<p>2023-6-6： apple vision pro实际上已经实现以上功能，望周知~ 但是价格太贵</p>
<blockquote class="blockquote-center">
<p><strong>思考具有局限性</strong><br>你认为的正确只是在你了解的知识体系中的正确</p>

</blockquote>
]]></content>
      <categories>
        <category>daily_note</category>
      </categories>
      <tags>
        <tag>ideas</tag>
      </tags>
  </entry>
  <entry>
    <title>how to build with hexo</title>
    <url>/how-to-build-with-hexo/</url>
    <content><![CDATA[<p>采用hexo这种静态页面的博客是无奈之举，因为云服务器+jupyter方式确实方便，最终云服务器到期了。<br>看了教程也是头疼，做下来感觉就是”难不会，会不难“。<br>简单来说就是hexo+ github pages，hexo需要用到nodejs+npm，github pages需要用到git。<br>先无脑跟着教程做一遍，再去体会</p>
<h1 id="hexo-github-pages"><a href="#hexo-github-pages" class="headerlink" title="hexo + github pages"></a>hexo + github pages</h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>博客框架</p>
<h2 id="nodejs-npm-git"><a href="#nodejs-npm-git" class="headerlink" title="nodejs + npm + git"></a>nodejs + npm + git</h2><p>nodejs： <a href="https://nodejs.org/en">网址下载</a></p>
<blockquote>
<p>note ： 从官网安装的版本自带npm，无需额外安装。但是通过shell apt安装则需要单独安装nodejs+npm</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></tbody></table></figure>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>git : <code>apt install git</code><br>安装好git后，还需要设置：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name xxx</span><br><span class="line">git config --global user.email xxx@gmail.com</span><br></pre></td></tr></tbody></table></figure>
<p>因为我们需要把生成的博客页面上传到github仓库里面。还需要获取仓库的访问权限，也就是将本地密钥放到ssh key里面<br>生成密钥（rsa）：<br><code>ssh-keygen -t rsa -C email@gmail.com</code></p>
<blockquote>
<p>windows： C:/user/[username]/.ssh/id_rsa.pub<br>linux : ~/.ssh/id_rsa.pub </p>
</blockquote>
<h2 id="github-repo"><a href="#github-repo" class="headerlink" title="github repo"></a>github repo</h2><p>创建github 新的 repo，repo的名字一定是 <em><strong>[your_name].github.io</strong></em></p>
<blockquote>
<p>note： 名字不是上述形式的话，会出现本地渲染正常，但是上传到github pages里面后打开没有任何样式。</p>
</blockquote>
<blockquote>
<p>note: 创建好之后，我们不必根据github的提示在本地初始化一个github仓库。后面设置好之后hexo-deployer-git工具会自动提交到这个仓库。  </p>
</blockquote>
<h2 id="npm-hexo"><a href="#npm-hexo" class="headerlink" title="npm + hexo"></a>npm + hexo</h2><p>安装hexo ， 以下是常用的hexo命令：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo generate # hexo g  </span><br><span class="line">hexo server   # hexo s  </span><br><span class="line">hexo deploy   # hexo d  将本地的hexo generate之后文件部署到github仓库，一般是通过hexo-deployer-git工具自动部署</span><br></pre></td></tr></tbody></table></figure>

<p>这里分为两种情况：</p>
<h3 id="新创建的仓库"><a href="#新创建的仓库" class="headerlink" title="新创建的仓库"></a>新创建的仓库</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-cli -g	  #安装hexo</span><br><span class="line">hexo init your_blog_name  #hexo 新建一个blog项目框架</span><br><span class="line">cd your_blog_name         # 进入blog项目文件夹下</span><br><span class="line">npm install               # 初始化安装必要的文件</span><br><span class="line">hexo server               # 也可以写为hexo s , 意思是开启本地一个服务，可以直接访问 localhost:4000 查看初始化好的hexo页面。</span><br></pre></td></tr></tbody></table></figure>

<h3 id="已经存在github上面的hexo仓库"><a href="#已经存在github上面的hexo仓库" class="headerlink" title="已经存在github上面的hexo仓库"></a>已经存在github上面的hexo仓库</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-cli -g		  #安装hexo</span><br><span class="line">git clone your_repo_addr.git</span><br><span class="line">cd your_repo_addr</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>
<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>在Hexo中有两份主要的配置文件，其名称都是 <em>_config.yml</em>。其中，一份位于 Hexo 根目录下，主要包含 Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。  前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。</p>
<ul>
<li><p>站点配置文件<br>下面是站点配置文件需要修改的地方：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">title ： 网页的名称</span><br><span class="line">url ： https://your_name.github.io/your_name.github.io  #github repo的setting --&gt; pages </span><br><span class="line">root: /  #root在url下面，没有可以加上</span><br><span class="line"></span><br><span class="line">theme：file_name_in_themes  # theme名字就是 themes目录下，主题文件夹名称。文件夹名称可以自己更改</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/your_name/your_name.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></tbody></table></figure>
<p>deploy配置主要是用作hexo d，也就是 hexo-deployer-git插件会用到的地方。<br>主要是用作指定github创建的仓库位置及上传到哪个分支。这里分支名为gh-pages，也可以自己指定。</p>
</li>
<li><p>主题配置文件<br>主题配置文件大部分不需要配置，对页面功能有要求的可以自行了解。</p>
</li>
</ul>
<p>安装hexo-deployer-git： <code>npm install hexo-deployer-git --save</code><br>当我们配置好之后就可以执行<code>hexo clean &amp;&amp; hexo g -d</code>进行部署到github，然后通过url查看效果<br>当然部署之前可以本地localhost:4000查看：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure>

<h2 id="编写markdown"><a href="#编写markdown" class="headerlink" title="编写markdown"></a>编写markdown</h2><p>hexo配置好了，默认主题就是landscape，不考虑换的话，就应该做该做的写博客了。</p>
<ol>
<li><p>创建新的文章： <code>hexo new "post title"</code></p>
</li>
<li><p>source_posts 目录下的xxx.md就是刚刚创建的博客内容，格式是markdown</p>
</li>
</ol>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>我个人建议最好做一份本地文件的存档，真正做到“云博客”，换个场景之后，可以把文件从分支上clone下来，配置好本地环境即可接着编辑博客。</p>
<p>我选择上传文件到main分支，main分支远程仓库暂时没有</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git init       #初始化本地git仓库</span><br><span class="line">hexo clean     # 清楚多余的生成文件，保留原始文件</span><br><span class="line">git checkout -b main  #创建并切换到本地新分支</span><br><span class="line">git add * 				 #将改动提交到本地新分支</span><br><span class="line">git commit -m "upload hexo files"</span><br><span class="line">git remote add origin url       #关联远程分支</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></tbody></table></figure>

<h1 id="更换合适的主题"><a href="#更换合适的主题" class="headerlink" title="更换合适的主题"></a>更换合适的主题</h1><p>theme 主题一直是hexo的亮点。找到适合自己的主题，体面，酷炫，一直是bloger最浪费时间的工作。<br>主题才是真的需要熟悉的地方。我觉得这才是hexo的门槛所在。<br>我自从搭建了hexo以来，感觉一直在花费时间换各种各样的主题，尝试每个主题不同的功能。  </p>
<p>在没找到好看的主题之前，这里就保存一下自己换过的主题用了哪些功能吧<br>因为LiveForCode 简单试用过之后就放弃了，主要是因为感觉还是要注重内容本身，不能搞的花里胡哨（虽然好的页面也可以令人心情愉悦，提升阅读体验）</p>
<p>所以还是从万人敬仰的NexT开始记录吧。</p>
<h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><ul>
<li>修改字体大小到0.9：我觉得默认的hexo博客标题字体都偏大，看着很不舒服.0.9我觉得正好。故调整了global字段</li>
</ul>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  #enable: false</span><br><span class="line">  enable: true   #改为true应用修改</span><br><span class="line">...</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size: 0.9  # 改变值</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><code>scheme</code> ：<br>Gemini， NexT还提供四种页面布局可选，比较中意的是第四种，Gemini。<br>或许后面页面功能玩的熟练了，搭配其他的也可以。</p>
</li>
<li><p><code>menu</code><br>添加了 Home ，tags， Categories ， Archives<br>其余的about，schedule， sitemap， comonweal，还没定义。就不放上去了。但是tags 和categories还是不能用。</p>
</li>
<li><p><code>social link</code> : github + email</p>
</li>
<li><p><code>categories</code>和<code>tag</code>，/tags/ &amp; /categories/ 里面的index.md内 type 字段值要和 _config.yml设置的保持一致。</p>
</li>
<li><p>首页内容折叠<code>excerpt</code>： hexo7.8版本以上支持自动截图摘要功能，需要以下安装<code>npm install hexo-excerpt --save</code></p>
</li>
</ul>
<blockquote>
<p><code>--save</code>的作用主要是将安装的插件记录到 package-lock.json &amp; package.json中<br>在新的仓库中执行npm install 其实就是读取或生成package-lock.json&amp; package.json 安装仓库的原有的环境里面的插件。<br>然后更改站点配置：</p>
</blockquote>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">excerpt<span class="punctuation">:</span></span><br><span class="line">  depth<span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">  excerpt_excludes<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  more_excludes<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">  hideWholePostExcerpts<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>local_search</code> : blog内容搜索，感觉这个功能主要给博客主自己用 安装：<code>npm install hexo-generator-searchdb --save</code></li>
</ul>
<p>然后更改站点配置：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></tbody></table></figure>

<p>在主题配置中启用：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><code>tag-plugins</code> : 意思是通过给文本、图片等打上一些标签从而实现一些特殊的效果<br>For more info: <a href="https://theme-next.js.org/docs/tag-plugins/">Tag Plugins introduc</a><br>注意： 这不属于markdown的语法，而是hexo在渲染时候的功能</p>
</li>
<li><p><code>emoji</code>:  通过shortcode使用表情， hexo默认的markdown渲染器hexo-render-marked不支持渲染emoji<br>可以通过更改支持的渲染器来解决。但是我不想大动干戈，本着emoji能用就行的心态，装个插件:   <code>npm install hexo-filter-github-emojis --save</code></p>
</li>
</ul>
<p>修改站点配置文件：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  inject: true</span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><code>flowchart/mermaid</code> ： 在next主题配置文件中找到mermaid 字段，enable 改为true<br>尽量使用mermaid ，似乎flowchart语法，在手机上浏览网页会让页面错误。</p>
</li>
<li><p>插入图片： 站点配置文件中post_assert_floder改为true， 这样hexo new post时就会创建对应的文件夹。<br>注意： 插入图片时应该使用 post_floder_name/image_name.type 路径来引用图片。 插入图片不需要安装其他任何插件，不显示就是路径设置错误  </p>
</li>
<li><p>文章置顶：<span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/im0o/hexo-generator-index-custom/blob/master/README_zh.md">reference</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-custom --save</span><br></pre></td></tr></tbody></table></figure>

<p>站点配置文件中的index_generator部分不需要改，完全兼容！<br>在文章开头添加 sticky 或 top 参数， 其值可以是 true（置顶） 或者 数字，数据越大，越排在前面。<br>hide参数可以隐藏文章</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Ideas</span><br><span class="line">date: 2020-05-06 09:59:10</span><br><span class="line">tags: ideas</span><br><span class="line">categories: daily_note</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure>

<hr>
<p>(end)</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><p>在使用NexT中参考了很多前辈的配置过程，在此感谢！<br>hexo官方文档： <a href="https://hexo.io/themes/">主要是选择主题</a><br>NexT官方参考文档： <a href="https://theme-next.js.org/docs/getting-started/">Getting Started</a><br>比较全的主题功能配置： <a href="https://www.meijindong.com/posts/3688165485.html">点此前往查看</a><br>hexo提供的plugins： <a href="https://hexo.io/plugins/">插件一览，要啥找啥</a></p>
<blockquote class="blockquote-center">
<p>集中力量办大事无法调动积极性，只会滋生投机份子</p>

</blockquote>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell-decoration</title>
    <url>/powershell-decoration/</url>
    <content><![CDATA[<h1 id="powershell-美化方案"><a href="#powershell-美化方案" class="headerlink" title="powershell 美化方案"></a>powershell 美化方案</h1><p>powershell是windows系统自带的命令行解释器，相比于默认的cmd，有着更友好的输入体验。<br>但是对于经常使用的日常来说，powershell还是没有linux-shell那般很好的交互感和外观。</p>
<p>所以今天花了点时间美化一下。<br>widnows版本： win10</p>
<p><img src="/powershell-decoration/preview.png" alt="最终效果图 - 主题是 robbyrussell "></p>
<h2 id="更换powershell7"><a href="#更换powershell7" class="headerlink" title="更换powershell7"></a>更换powershell7</h2><hr>
<p>powershell plus进阶版，甚至支持显示历史记录命令的功能，比powershell（以下称 <strong>“posh”</strong> ）又是上一个台阶。主要是还可以可以DIY。  </p>
<blockquote>
<p>微软商店也有一款windows terminal，类似于win11系统里自带的cmd。只支持在设置里改配色，不支持插件改，同样不能更改主题。<br>自带的默认的cmd就不说了，懂得都懂。</p>
</blockquote>
<ol>
<li>所以在接下来美化开始之前，先安装PowerShell-7.3.8-win-x64.msi：<a href="https://github.com/PowerShell/PowerShell/releases">点此进入github仓库</a></li>
</ol>
<h2 id="更改配色-Colortool"><a href="#更改配色-Colortool" class="headerlink" title="更改配色 - Colortool"></a>更改配色 - Colortool</h2><hr>
<p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/microsoft/terminal/tree/1904.29002">官方README</a></p>
<ol>
<li><strong>安装 - win10</strong></li>
</ol>
<p><a href="https://github.com/microsoft/terminal/releases/tag/1904.29002">下载压缩包，然后解压</a>  </p>
<blockquote>
<p>解压缩的目录下面打开命令行（或者把解压缩的目录加入到 PATH 环境变量中）</p>
</blockquote>
<ol start="2">
<li><strong>使用</strong></li>
</ol>
<p>配色库：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a></p>
<p>下载 iTerm2-Color-Schemes/schemes/ 目录下的*.itermclors 配色文件 至 <code>colortool/schemes/</code> 目录下</p>
<p>通过 <code>Colortool.exe -s</code> 就可以列出所有的包含新增的主题列表了。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 更改主题</span><br><span class="line">Colortool.exe -b &lt;Theme&gt;</span><br><span class="line"># 将主题设置为默认主题</span><br><span class="line">Colortool.exe -d &lt;Theme&gt; </span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>在colortool/schemes/ 目录下，我们可以看到，同样支持 .ini 格式的主题文件</p>
</blockquote>
<h2 id="更改主题-Oh-my-posh"><a href="#更改主题-Oh-my-posh" class="headerlink" title="更改主题 - Oh-my-posh"></a>更改主题 - Oh-my-posh</h2><hr>
<ol>
<li>打开posh7 输入如下命令来安装 <strong>Oh-my-posh</strong> ：</li>
</ol>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; <span class="built_in">Invoke-Expression</span> ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://ohmyposh.dev/install.ps1'</span>))</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>更改配置文件以达到每次打开posh都生效：（没有则会跳出来新建的弹窗，点击创建即可）</li>
</ol>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>增加一行：</li>
</ol>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将命令中的 &lt;Theme&gt; 替换为你想要更换的主题名称</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh <span class="literal">--config</span> <span class="string">'C:/Users/Posh/&lt;Theme&gt;.omp.json'</span> | <span class="built_in">Invoke-Expression</span></span><br></pre></td></tr></tbody></table></figure>

<p>获取Oh-my-posh支持的主题 ： <code>Get-PoshThemes</code> 这个命令会罗列很多很多主题</p>
<p>通过以上方式部署的主题已经默认支持git的显示了。<br>如果没有显示可以通过以下方式安装`Git-posh`` : </p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser </span><br></pre></td></tr></tbody></table></figure>
<div class="note warning"><p>通过 <code>Install-Module oh-my-posh -Scope CurrentUser</code> 安装 Oh-my-posh , 2023-10-19 亲测已经不适用<br>但不代表Oh-my-posh不支持powershell了， 最新请参照<a href="https://ohmyposh.dev/docs/installation/windows"><strong>官方文档</strong></a>进行windows安装</p>
</div>

<h2 id="更换字体"><a href="#更换字体" class="headerlink" title="更换字体"></a>更换字体</h2><hr>
<ul>
<li>简单</li>
</ul>
<p>右击状态栏–&gt; 属性 –&gt; 字体</p>
<ul>
<li>添加字体<br>（暂无需求，有需求再更新）</li>
</ul>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><hr>
<ul>
<li><a href="https://github.com/microsoft/terminal/tree/1904.29002">Colortool.exe README</a></li>
<li><a href="https://ohmyposh.dev/docs/themes">Oh-my-posh 官方文档</a></li>
</ul>
]]></content>
      <tags>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>For Life</title>
    <url>/Thinking&amp;Experience/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Warning！！请停止窥探隐私行为！！您的IP已经被记录！！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2926ca8fe0d22975a01ce16dc70372d81c0daeba042ccc608cf5cf14f27ec0e0">d370c5caa6f82aab46a5e5036abddd95f3748a1f868670e6c92a5d7157303714555794d1e8593b3200afee48d526c32cf6d2539a053be8345bb623863bfe1ef2bc8e6db1fbdc25d588cb61293da0bdd77db069d154eea9ea2f1771f1d34f939d132cd07a4de316991cf6f3acaa0568fcb619a20d8aa644e2ab1e0b6a5c2ee52a2135163afdae434b83a24ec668d23721b5d004dcb42d2b285dd476a9fc3ac4b5ed7a4e2e1eb2749ee792ccff2b58aae0e4eb2bee35baecd60d14c8ef577e3ce7bcab8039a47d027018526fd358f92e1dad8670cbbf59d83fc552487827d027c303e5b93910ce97ccc5e5cce67b0a209645f5b2377b7d5978f1d437edce560e569dcc9b072543eaf78253c787d28bfd81081e9d7e257f9a83df7366245f00c456f90c82181e00507b2622a87e37dd91a5b07b994b03b938aa94f9b486e717576e67a218e96681a5a8965854de702e77dac80d5bdcc3c3b96be2f2226bf9e7b622635d57518cf2dff9e200773751064a0cf11dc43365caa395440a121a447cecaa611511dc4f082716d591a9e897011c99146ba87db87d7f188cd62d25ccdc17606ccea794c81a6c40c9ca6b4bb9330c8bb098e7212ec96af65817af3a6ad94a8c2e3807656275fe0689181f9ea2ff58d244e05992197d4b9bf678dbbc84134c03edde72ee09d1e4aa9d11ae1d4ffda0af805d27a16b137547faf0d9eb1f146a5c89d89a2b967dc70c4521bb70410cf9368c6c9b22db7cacd09793f57bed8160e7b9949532b4a80278b49bc150dd1f0a471243cf9d6c5810ce6deb69f767ddc9cb083697f3fc0769959cd6388ceaea98e62f17e05cb0b33ac6aafb11e9daa71a1a13881ed2d6a011db30765cab1a9b0ad567325852097d17ea135b0222627df957457f611a3bbd76089c5764871ec4fcc3c78ea215ce210725447e5cd675a7b8829f033da3b2e958155f142202ae666739d08d7a6df195fc73a59979d63c831945898f143faf36a21f1892a034c827164800c0c46da2cf54c83adf2dfd410f2f4ebc998bd0c6251d040846f8827e28a66577a43fdf654b1cd38fc047f0a84bd9774e61ffbfd0d7b59e3f5b7e05b4a7e4194250f3400082e146e22be9e81f006d8a59b84a9036c5a03eb7eda8439e8e2a1c29a7add5b0f9e03831ec997b2bb4a358644cc02d9224746b6540fdb85c0e87aa9aea7a5400a3d8a27398124a3fc4531f14b9f0b2783f7ff6cfac661588a12e684ce38b590250e8fbf34bb145065455c699748a32071f139a77cfe690119181924413aead840bbea9aaadcfb618f564d899aa1d9072716003fbb05c80770436b5f893be096e812e06f47914999cec101271ca6170db381532aaf80356b1dcdcda640f18cc743ff8ec2ed0b40f1bdad0fa2d52d1fd2f103323dbbcdefc492da89110259776a26794ac9778fec0c20ef66ebfb79bfef1c28fe9fb5fe7082831344790a093532a1030839f7acd999127036f5c7066ae8db931e20dce3fd5ab267e6efc6fa702c934fa879b22f5918177afb03355531906705760f92a8e2389c0a5fead6c78fcf66929f867b0302d579759d58581d2eeeb059e85d32387147a070fa7da2cfccbb01f8328438fe2a57d588f719406988d6deaf04d9c3ce00eb98787b54df0d4a5686c375649c0f5dd229d33bd7b7ac57850345f2a314470f630630b1d569637ea813bd9cd055f8455d26c7cf80a2a71cc4e7fb3e54775f1a266a1c33a9f50170d67630894b56565c1bcc759579cd1a5da4301eab50a9ecc949bc066b907f5a2bd2db6021e6d165b9d2dc35fb96717ebae03cd35a2ab3f76192d992eca01057f4488aeab83aabf55c850ba2b8a8c1e32681b4a15718d699e0dda6f6cd2787441c0c16a10038e82a29a39d19b35bc7425ce5676fa66b30aa927317b50a1e2fd84ad0e865b500c06754b7c8d9b800ed565b2930fe1dee14741113daa7f9795fa76d982b454c127da14ff6d1e0dfe59df7708d42cdb5c4a0652be4c03b7a3022dcd67b2cd716d4c8f6354135319b92a513ce2f040285bd2dbfe326b122c7ea7c8f36a9e675541bb10367926ff680eea9916f2f1dc8e71905103f9323c83506c1a234ca3b3fb8f6324e75ce77bf5065c79fa7a8d1f4c15b2a220407fb8d09053b2089be65979c65528603019605a034890f3e6ebd8ecd24958381c031ce3aa5aa37f5d7235508712ce52a8c06c89ce7bb82e8b39d2e0b0688701316a1946716bd9dddb2b1044d49dad5b401d1b0ac95c0bd60685a4151c84375321feebfabf06d7ba54d7054e0ffac6c2e5f016f5b55001383a16d7616c05d066758436fbbf58e00713962ac990a353facae0c1c69b507841ad508911b9939b60274aec161feda77762972d35980a6267c10a27f8e60e5fdc30130e31725aa1c051770121fc10217860ed2d4dde355a856818dd2d1523a8498408f5c608ebfb9ec54041c8d1134cb629f7180c9ef1588158012943b0c3b472169cf9075eef0b0f8d9790e0fa2964d07c2ac7d0cfd0cd66f08ece6552081af9a08b63a48117009398e3c89629e72c00e41c2d9ab3df8d0ca3abda03d4c22579c0d640790fd90eaff20371972cc00a7b37c59d6f7029136dba83867360251e75e7827bed1b54e46b997ea6d4a899c6fb91285207a5fa5c8763729e8589a92a42edff4b2047075026f630eb0fd855081e57354ead606b3f0f609c08d487eec1ae8445d10bd6e4d144781da3fa8bf91f4f1b90b8d94bf50a0f6da78be8d3ee6af4cc8e5a52e0d63a4fae92458a149d02cfe71bc05fd2877789bb33ebf41ef91d685ee803ee4061d429f478775951f3f49575fed904877a3c912762470a5baa4022d1da77a85677da666383b7f808ded9cc772bac3f4adb8686fd77528d562196952f05a5458675d62eb234ca2cd9642acecebca255dbae55b488192511fcdca8f89595822378ff0ee808e50fcd599a94de8dd3d31c685c665dfa214478816f00cede22bd0c617d3306572fe08d0705c5f9a20d00defa8415328a4abd12d7ccbeaf2db2122769b92e1a3c4263df3114aceadeb49806f90c31ec7a2c11efd82f51049f225812b94b8e6ab7e5bf47c0670f81b934524e055dc02806e783d0d126ec3f048232469c2d81d70159df8ed2a4e042ea037d9cf14f5469bdbb56d32a25c2d7785a9a763ebf9fb99bf6814818ae7c2ac51a0a9f48a8b64599f435c1f2cf4642cc542b603d73bb6f7d6ae986b2f923914f062e65f0b2101d8c668dceed3026117e2f07eabf92491103679d1ab066105fc58756366d55bb170657a5e5e80d97ebe5a106f76c840e8c05378ee008e5e95b6e3e69cb02bd0dc3e38b8d109b7ee816fd77288923f6fbd41664975013c04a16baf38b8f75cd6245dae7740799e3a71bbff9d51b715dd7c85ef3b0d77d2589f146f29c2c91aae7baaeb4e37ab5fcdc54afcdf06943d104ddb7b08a8722a8fb5bf57c56affc9586c17d3c5956ddcc96eae8022d8d0e8549bd772160f347223f0e0a0ad741b8646bc1b02f0966e0bae1da5e3d94352acca17160d136a67fe7f237197388026b9e39724f93b7602d0667dbbcea06d273c69f7846321af35988114b559fc2de1dc74bf6028159fd2613359a8901871d24d2bbb59ff5246e418b14552e15da575633e6a067d7d79b4ef77ce058adc34bce86e139ab58f6aaa1dd2279238674003d071cccf73a4feb912f3430ad68b66e522e1fc79f99550888bcb4853ced942558c4d43c8f912c27ee4188995c2b93e608c26269cec6c595a0d34fb4d4018a09107f834ff1f42624125d8650c9002c2f56dc6fd8646b53389b7e19b5b310d603193b95372c22df6a67a7300edf1ba4ca9ad9fda3922d2422160d259bd7257186148182efdb23a1f72cf88d8711bd0fe8cef38dfdc6a012eb8a587d44b979300dd08cafcde971ca7c7cbb4a7ee1dcc41544ecd4a336ca27b513033d4b7fb8485c8b988a8d60f69102534c29867f75183c7a5bfa4bc2eaf1e179a356b0858b326eee1a5877846bdfc737843c8dce27e864af57ad672bbb3579b1fb8de29fcf196cd193b62c7fc894b0e9290d94776eb2a2077d42d73a4693c657fb5ebefe2888a9c0883d3dbcfcbbf4e37cbf7475233df7102d274c28f2bf5149d854834b5be3c639e5e65abf2ee231b4bc18c91ff98370d9234123b549112ef83894719414a24e6c7655de58a79abc8ebdc1d6cd03900d30b776560dfb4bbfca08314078028706d4c9220a5f0604cb21da1fa256c387c7de021557f6c7a865953e4a76c44affdb28c1bd38ceef920131c71e538bc0f1f070c41631d2074fc4449c4750b203d4dffdd878d3447464b4bb42f6821f2814597a4c10331e67eb754f744e0ffd3eb2e3be6a524f308fa81a2941c0ff82968af7d4f797a346aeb065a3a5e6ac66454831cf2be424c55d3a8326c1856f6320528bc7887bcefb314edfd26760d7787ea698f16211b21412460e754e9b69d50a7c09708541fe951e9570855eac865cbbec987eb1f4bea9a057a8413efbc81987260d9f04fad1c01c0da782ad666160ac911b4c712a721189b104fdbd6a725a3533d47dba1fe0143c99da3ef3d92f6d0449d637501d4689a6b0bf4e40d2c91fb0dd9e5afd1ae2dc9d7a28cf0a665a1371406459700be66441705c5b579d9388b584e129d4236e334fcbe376823aac0e0e590dca00f90757446897fe0c5a656ae7622ebcb3f7edcc5504e9c0803b0c1586043102ce64ee9928aa24fe90dbfdb4bef2fbe02dabe89b974d06d3cd0d026cdd77249ee0b584558d21f4d69059db08318374a8cd0c7747f7700d91b06caa237745e4ba694b9bf29670e43a2c38f6b86f39d0ccc7468b3e713303cb240482cf4804e14e65fc1d5be9f7b817c0823ba197aaa1e94509fb52b0bf1c4c089d5cd7553b02fb217d711ba53408b6d8f739c8001da049a749df599b94daf8ddfa6b4c6bac6ef51b8e9387227891accf89264165cfe7f282f75fa1b28a310b3b8a04cf0e87c424612d94cc6c55445ab564189172117f89c28fda8e78bb24d576ecf7be323ba22f6a3bdae4c96aa2b4f9606088540dbf63b71daf2b37c93f77</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Ops！这篇文章博主似乎不想透露！</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>stable diffusion</title>
    <url>/stable-diffusion/</url>
    <content><![CDATA[<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><p>为什么可以从文字输出图像？<br>首先得复习一下机器学习。</p>
<h2 id="Relate"><a href="#Relate" class="headerlink" title="Relate"></a>Relate</h2><p>当下ai绘画主流产品：MidJourney ，stable-diffusion， DALL·E</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>特点</th>
<th>共同点</th>
</tr>
</thead>
<tbody><tr>
<td>MidJourney</td>
<td>收费</td>
<td>三款产品都是可以根据text形式prompt(提示词)来生成图片也可以根据图片来修改。</td>
</tr>
<tr>
<td>DALL-E</td>
<td>openai 产品之一，著名的是其语言模型gpt-4 ，ofcourse，收费。</td>
<td>^</td>
</tr>
<tr>
<td>stable-diffusion</td>
<td>开源免费，适合商用</td>
<td>^</td>
</tr>
</tbody></table>
<h2 id="Requisite"><a href="#Requisite" class="headerlink" title="Requisite"></a>Requisite</h2><ul>
<li><p>潜空间</p>
</li>
<li><p>UNet神经网络</p>
</li>
<li><p>调度算法Scheduling</p>
</li>
<li><p>扩散diffusion</p>
</li>
<li><p>生成过程<br><img src="/stable-diffusion/image.jpg" alt="图像生成过程"></p>
</li>
</ul>
<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Prompt</td>
<td align="center">提示词（正向）</td>
</tr>
<tr>
<td align="center">Negative prompt</td>
<td align="center">消极的提示词（反向）</td>
</tr>
<tr>
<td align="center">Width &amp; Height</td>
<td align="center">要生成的图片尺寸。尺寸越大，越耗性能，耗时越久。</td>
</tr>
<tr>
<td align="center">CFG scale</td>
<td align="center">AI 对描述参数（Prompt）的倾向程度。值越小生成的图片越偏离你的描述，但越符合逻辑；值越大则生成的图片越符合你的描述，但可能不符合逻辑。</td>
</tr>
<tr>
<td align="center">Sampling method</td>
<td align="center">采样方法。有很多种，但只是采样算法上有差别，没有好坏之分，选用适合的即可。</td>
</tr>
<tr>
<td align="center">Sampling steps</td>
<td align="center">采样步长。太小的话采样的随机性会很高，太大的话采样的效率会很低，拒绝概率高(可以理解为没有采样到,采样的结果被舍弃了)。</td>
</tr>
<tr>
<td align="center">Seed</td>
<td align="center">随机数种子。生成每张图片时的随机种子，这个种子是用来作为确定扩散初始状态的基础。不懂的话，用随机的即可。</td>
</tr>
</tbody></table>
<h2 id="env-build-windows"><a href="#env-build-windows" class="headerlink" title="env build - windows"></a>env build - windows</h2><p>click here <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">official guidance of source code</a></p>
<ul>
<li>写在前面的tips<br><strong>请确保显卡驱动更新+ 更改pip源 + git配置，这样安装过程才会一帆风顺</strong><ul>
<li><code>更新venv目录下的 pip版本</code>或<code>pip下载库connect timeout</code>常见问题:<br><code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code><br>或 修改<code>pip.ini</code> (<code>C:\Users\name\AppData\Roaming\pip\pip.ini</code>)：<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line"> index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure></li>
<li>git添加代理<ul>
<li>飞机场用户</li>
</ul>
</li>
</ul>
<ol>
<li>到飞机场设置中查看本地监听端口</li>
<li><code>git config --global http.proxy socks5://127.0.0.1:[port] #git全局设置</code></li>
</ol>
<ul>
<li>VPN用户</li>
</ul>
<ol>
<li>端口是配置vpn是设置的本地监听端口</li>
<li><code>git config --global http.https://github.com.proxy socks5://127.0.0.1:[port] #专门给github设置</code></li>
</ol>
</li>
</ul>
<ol>
<li>全自动安装包 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://nerdschalk.com/install-stable-diffusion-windows/">详细的指南(包括支持AMD显卡)</a>  </li>
<li>manually install： (先犯错，再总结)</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># prepare `python3.10.6(更新的版本不支持torch)+git`</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br><span class="line"><span class="comment"># 更改pip源 + git配置代理（如果没有使用vpn，按照下述，修改目录下launch.py）</span></span><br><span class="line"><span class="comment"># 修改 webui-user.bat :  set COMMANDLINE_ARGS=--xformers --no-gradio-queue</span></span><br><span class="line"><span class="comment"># run webui-user.bat  #不需要管理员权限运行</span></span><br><span class="line"><span class="comment"># #重新安装basisr (下列都可省略，如果出现对应错误情况下)</span></span><br><span class="line"><span class="comment"># #run webui-user.bat</span></span><br><span class="line"><span class="comment"># 等待下载好模型</span></span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>完成安装! 本地浏览器进入 <code>localhost:7860</code> 或<code>127.0.0.1:7860</code></li>
</ol>
<p><img src="/stable-diffusion/finish_install.png" alt="安装完成"></p>
<h3 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a><strong>Trouble Shooting</strong></h3><ul>
<li><p><code>Torch is not able to use GPU</code></p>
<ul>
<li>尝试更新显卡驱动<br>官网下载最新驱动 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.nvidia.in/Download/index.aspx?lang=en">链接</a></li>
<li>更新后删除或重命名stable-diffusion/venv目录</li>
<li>重新执行webui-user.bat</li>
</ul>
</li>
<li><p><code>RuntimeError: Couldn't install gfpgan.</code><br>如果一开始遇到pip install慢或者失败问题，建议按上述修改<code>pip.ini</code>。<br>根本原因是与github连接网络不稳定，小飞机虽然有点用，但全局模式用处不大，可能会成功，但是龟速+失败多，还是建议以下方式：  </p>
<ul>
<li>方法1 ： <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/CompVis/stable-diffusion/issues/506#issuecomment-1438585062">resulotion</a><br> 将launch.py 中 <code>https://github.com/</code>替换为 <code>https://ghproxy.com/https://github.com/</code></li>
<li>方法2 ： 给git添加代理</li>
</ul>
</li>
<li><p><code>No module 'xformers'. Proceeding without it.</code><br>缺啥补啥，在webui-user.bat里 <code>set COMMANDLINE_ARGS=--xformers</code></p>
</li>
</ul>
<p>关于 xformers : <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers">xformers github page</a><br>简而言之, xformers可以加速图像生成速度,减少VRAM使用, 2023.1.23之前都是需要用户手动安装的,之后<strong>AUTOMATIC111</strong>版本的webui<br>集成了自动安装xformers,但是需要再启动command里添加 –xformers以激活该功能.</p>
<ul>
<li><p><code>ModuleNotFoundError: No module named 'basicsr.version</code><br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/1598#issuecomment-1501010130">solution</a><br>重新安装basicsr<br><em>该错误根本原因是python库里面没有basicsr库，这个肯定是安装的，就是用的时候没有。<br>由此可以想到，这是本地环境有问题，而非工程问题。应该是没有装到正确的地方。这个问题大部分情况不会出现，因为本人电脑上装过的python太多。  没有其他的裸机去验证。暂时就这样吧。</em></p>
</li>
<li><p>打开后输入prompts时网页右上角显示: <code>Something went wrong Expecting value: line 1 column 1 (char 0)</code>,且运行出错<br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/9132#issuecomment-1488840066">solution</a><br><code>set COMMANDLINE_ARGS=--xformers --no-gradio-queue</code><br>stable-diffusion支持生成gradio链接, 目的是可以在其他设备也可以访问该服务. 如果本地开了vpn代理,则无法生成.<br>方式就是关闭代理,或禁用gradio生成.</p>
</li>
</ul>
<h2 id="env-build-linux"><a href="#env-build-linux" class="headerlink" title="env build - linux"></a>env build - linux</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install wget git python3 python3-venv</span><br><span class="line">bash &lt;(wget -qO- https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh)</span><br><span class="line">sh webui.sh</span><br><span class="line">#check webui-user.sh for options</span><br></pre></td></tr></tbody></table></figure>

<h2 id="env-build-服务器上通过接口调用"><a href="#env-build-服务器上通过接口调用" class="headerlink" title="env build - 服务器上通过接口调用"></a>env build - 服务器上通过接口调用</h2><h2 id="use-case"><a href="#use-case" class="headerlink" title="use-case"></a>use-case</h2><p><img src="/stable-diffusion/aweful_picture.png" alt="垃圾的图像效果"><br>上面图片就是我刚进入网页时随便输入一段话然后生成的结果. 简直…不堪入目 <span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>!!!!</p>
<p>如何进行改善呢?<br>影响图像效果的因素： <code>参数，模型，prompt</code><br>先来熟悉stable-diffusion-webui上面的一些模式</p>
<ul>
<li><p>text2img</p>
</li>
<li><p>text+img2img<br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://blog.51cto.com/tinygeeker/6185988">几种模式的解释</a><br>以下仅作为巩固记录：  </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>resize mode</td>
<td>依此是：<code>拉抻</code>，<code>裁剪</code>，<code>填充</code>，<code>仅调整大小</code>，缩放模式指的是当原图和要生成的图的宽和高不一致的时候，选择的缩放模式，一般选择裁剪，如果原图和生成图的宽高一致的时候，选择任意均可</td>
</tr>
</tbody></table>
</li>
</ul>
<p>一些工具，可能以后会用到：</p>
<ul>
<li><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://vocus.cc/article/640ee135fd8978000155ef23">controlNet 工具</a></li>
</ul>
<hr>
<h1 id="应用–换装预览"><a href="#应用–换装预览" class="headerlink" title="应用–换装预览"></a>应用–换装预览</h1><h2 id="Scenario-1"><a href="#Scenario-1" class="headerlink" title="Scenario 1"></a>Scenario 1</h2><p>淘宝商家给出衣服图片，用ai绘出穿着衣服的人物模型，支持各种场景和人物姿势.<br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://www.zmo.ai/aimodels/"><strong>AI models</strong>样例</a></p>
<ul>
<li>Details</li>
</ul>
<ol>
<li>随机模特模型生成</li>
<li>提供的照片衣服模型结合</li>
</ol>
<h2 id="Scenario-2"><a href="#Scenario-2" class="headerlink" title="Scenario 2"></a>Scenario 2</h2><p>消费者网购衣服，需要预览选中的衣服的效果，不同场合，不同姿势。</p>
<ul>
<li>Details</li>
</ul>
<ol>
<li>消费者人物模型生成</li>
<li>选取衣服模型提取</li>
</ol>
<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>如何生成不同的models？（训练，）<br>生成的models如何与图片中的衣服结合？</p>
<ol>
<li>client<br>选择衣服，选择预览人物</li>
<li>server<br>根据所选衣服和预览人物，生成提示词，填入后调接口进行生成</li>
<li>生成提示词精准度</li>
<li>提高生成速度</li>
</ol>
<h1 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h1><p>(待续)</p>
<hr>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><em><strong>reference</strong></em></h1><ul>
<li><p>模型下载 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://civitai.com/">点此进入</a></p>
</li>
<li><p>我从这篇简单的入门 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://zhuanlan.zhihu.com/p/610094594?utm_id=0">点此学习</a></p>
</li>
<li><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://zh.wikipedia.org/zh-cn/Stable_Diffusion">wiki是一个很棒的学习方式</a></p>
</li>
<li><p>好玩的AI社区：<a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">这是stable-diffusion的一个样例, 还有例如chatgpt-4的体验空间</a></p>
</li>
<li><p>一些教程:<br> <a href="https://github.com/ivon852/netlify-ivon-blog-comments/discussions/437">湾湾的教程</a></p>
</li>
</ul>
<blockquote class="blockquote-center">
<p>“Do one thing every day that scares you.” –Eleanor Roosevelt</p>

</blockquote>
]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>ai绘画</tag>
        <tag>statble-diffusion</tag>
      </tags>
  </entry>
</search>
