<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>History</title>
    <url>/History/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Warning！！请停止窥探隐私行为！！您的IP已经被记录！！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="257754c351c72209c9a706d8fa3c104efdfe6f38800019d624362ccfdc1ae817">d370c5caa6f82aab46a5e5036abddd95ec52576d88b9b0cafa4e452b76dd65f76bba0c5fef7e2cd145778ffe27998acc112fdd2b6ef707993ffd4db77c56ee3d931e29462c1aefa3a5d32d8cf09443b832612caba66245b61fd1b44a54865ba51ae7fa9cf40f5a8bd59bdb4316b2cf72a7408f042e0712b56fcd72edef817e795520e0fdfb5f883d0735c2250b31da2f803c6495aa30cbe1a9a9028b49ea9afe26d3f7e70fb03d352961533126dcad197b978bb56643250615275431e533006bd914c744c9518ad40d2c0edfc8c75baa5715bbb3f96fb5c2a29f214ccc7b7f914b394edea6362ce9b7e09345e2babbd0b7737dd4b92ea1393cc81052076f302fdf1391f544ce400161d9b1989f567caa13f5b053637c91be1612b4ab836ea9e02e0248e23a0f4e02ddf5a9e229ca3c34177d9ea953527cf0335def44046dcb8a6411e67c0b3d7964b85a53ea88e2a0221b21d2a569591cea6539df773dd00dd14d5c87442fda85c9af9c151746adb4d0827b3b273ec80ec86f30e4a4d6b8a2f9e9792f81d66446d2de3e209e8ab26141010a771d5ac6f718403a84d382644db299dbe7739b586b381decfcf20238ef0bd705cad7320cc6c6a2b836c4b036234422a6f4d89c8fa216e89824816292539ccdb594fb4da5a20e8a0b73a4c153248730467c516760aaf083854fa19d94ebf712827daae8bed2edd021fbec063f0868952b9d352315c2b436ba978c22b505c6ee87c80ef94d22dcca0b31c03f56196fafd5dd76388605d5a367053d2f3340860c6606d0de4bb2135caa04e68efb00e0ab387892c8953dee35860f5cdb42b96f37312d14cc18a4404c58f6cfd8f50dc961139e1b9f62c570a538bea141ccb22e964c5cb48071794f21d2a34fb722e903d759f41a56127b0a94f97e64f9751aabcbc8cc40c99729e67dc9e9b244f404c9bc7cd1616a59bccf1df959c3294bd56d8b29e5043d01eb7f5c3c2293eba682e0ef125efadd2309f6c4a326db974f6040a051dfe370316f9573bc86994fb39c9b9a461b4ceb8a3d8df3201c3e48afe4602f59adb83374de31b56dae7e5a32f6b06024101efc0ea404d73dae620cb2299273e0fdbb7e47f18389d1692284369fe6d66d3b8d29c1b47dc634688eece7691736199e52e275953d9cea75593bec85508fbe043591bd00669c5ea4ab0cfa43a10d3d6e4c7e8838f86e2ad3974b90cd28391ae7b2f3bc16e355c94ea70273dd33cf582c13ad546011c1cc9b9557e5456ce585abed55b0da9ce5f69b2690d9f7ef3b904b8c4f12efff2c01944dcf9b4ac2de1e84cfb42b39b77bbcd40951bdff2dc21668c9249086efc40a38c1a40675c3ac014deed2b0816dab79a14a7902f13704411887d094ba84d6b78cb769ca33eef97e1bcd704182bd43cf2bc1e3921353e5ad452ba93a6de93480448fd021bff6ef031f2b85126a1ab15a6f89ce35d2b2a49493ebe58936b827e852f31e6be9c5c32eb917a034e7af101a511616030971548c79856b0e5113f29520838819164db655120502532fb46710720deeb234951fd3f0c6f4d95a59ba7c18757f18e3f3ba0f5199d614998a2c75449655f4db61e142c93703b08ab46e600047fb0d10206f05642e3fef4a29d04564ddd2bc368a2a4c323e01257e90585e486d626445c132c5ea5b287d55449bad8d773f73a49314077e822bbb819155224ae0e2e2f88227a7f460611f05761e9b4a502e4f6903b7a18479b21acbe2449bafe128e13d71983ea6871761fca0b06bc7a99c724e3e44169c55d9a4ee54c72f99f17b24f37d8a0ee77745b5ed76c48b0a277a913d00270772d2b52f8a2725fb677f0176b7aca28d79b0f69608651e22a8c7f26426c9d1fba68193ff6e0527619f8bdc42370da11ada39afc9ebdfec78d1d15b252c0bd7a70bde6cc77f338a5cbf4a933783636b12a6df572dcadd57fa9a5f24da25f46849771995707707ae6d8e0cee227e97c9d06d0be09dab0232329f609ecd82bef9d0d1f25ce324b5538e59efad5d4ff35b7f8154dbd0b876e4053a80bad698ea45c6d53bd82e4788816bb8c066ed6b77ccdf7b2c26bf833a9a98a3fa77a3c69bb69f679d898a5506add80bbd443a919396c6d8ed7ece18289346c679e520198afe347d543e99bfb9b59c7bbdc78ea093fd6d73bf61d0e2cc88d7038602ae6e9218cbe982e795304d6d1d3f9a14748638c4a9c0c95b7a88e796cfb8c7d96fcc7ddaac4403b72c4b65b7cd0aee00f515384f9d54566e25822c4bfd55a6584120875111cf445ee415be7bea9112675940efec568f80186b5c87a12c15b94db80bb19a95324d66751f0d7b04715336e9781d2b4155eaf031c78feaed95e9f4d3001d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Ops！这篇文章博主似乎不想透露！</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Qemu</title>
    <url>/QEMU/</url>
    <content><![CDATA[<h1 id="Bg"><a href="#Bg" class="headerlink" title="Bg"></a>Bg</h1><p>qemu模拟optee</p>
<h1 id="what’s-qemu"><a href="#what’s-qemu" class="headerlink" title="what’s qemu"></a>what’s qemu</h1><h2 id="what-it-can-do"><a href="#what-it-can-do" class="headerlink" title="what it can do"></a>what it can do</h2><h1 id="optee"><a href="#optee" class="headerlink" title="optee"></a>optee</h1><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.cnblogs.com/sewain/p/14206365.html">业内人士对qemu的介绍</a></p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>optee</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown basical syntax</title>
    <url>/Markdown-basical-syntax/</url>
    <content><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h2 id="换行、段落"><a href="#换行、段落" class="headerlink" title="换行、段落"></a>换行、段落</h2><blockquote>
<p>换行：两个空格<br>段落： 一行空行</p>
</blockquote>
<h2 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">** text ** </span><br><span class="line"> * text * </span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><strong>note</strong> : <em>注意markdown中的符号后面的空格</em></p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1. xxx</span><br><span class="line">2. xxx</span><br><span class="line">3. xxx</span><br></pre></td></tr></tbody></table></figure>

<h2 id="链接、图片"><a href="#链接、图片" class="headerlink" title="链接、图片"></a>链接、图片</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">链接[source](link "description")</span><br><span class="line">图片 ![](path "title")</span><br></pre></td></tr></tbody></table></figure>

<h2 id="转义字符-‘-‘"><a href="#转义字符-‘-‘" class="headerlink" title="转义字符 ‘\‘"></a>转义字符 ‘\‘</h2><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure>
<p>单元格合并 ：<br>属于markdown扩展语法，需要markdown渲染器的支持，不支持没效果，记录一下，万一以后支持呢。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 或 空 ： 横向框合并</span><br><span class="line">^ : 纵向框合并</span><br></pre></td></tr></tbody></table></figure>
<p>表格工具： <a href="https://kz16.top/ckeditor/">点击试用</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>行内插入代码 ： ` code `<br>多行代码：</p>
<ul>
<li>``` code  ```</li>
<li>四个空格或者tab缩进</li>
</ul>
</blockquote>
<p>代码进行语法高亮</p>
<blockquote>
<p>``` python<br>python code<br>```  </p>
</blockquote>
<p>即在```后标明 code的语言  </p>
<h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p><code>:joy:</code> </p>
<p>示例： 这是开心的表情 <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>如果上面没有出现表情，说明渲染器不支持emoji的渲染。需要安装额外插件<br>更多表情简码列表，<a href="https://gist.github.com/rxaviers/7360908">点击这里</a></p>
<h2 id="改变字体颜色"><a href="#改变字体颜色" class="headerlink" title="改变字体颜色"></a>改变字体颜色</h2><p>markdown不支持改变字体颜色，但是支持html语法<br>通过<code>&lt;font color=green size=7 face="黑体"&gt; font &lt;/font&gt;</code></p>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$公式$  #行内插入</span><br><span class="line">$$公式$$ # 单独一行</span><br></pre></td></tr></tbody></table></figure>
<p>$$ f(x)=sin(x)$$<br>如果上述公式看不到效果，检查markdown编辑器或者渲染插件是否安装了math插件。</p>
<p>公式工具：<a href="https://kz16.top/latex/symbol/">点击使用</a><br>公式速查：</p>
<h2 id="flowchart"><a href="#flowchart" class="headerlink" title="flowchart"></a>flowchart</h2><p>能看到flowchart的前提是有解析工具，比如 markdown preview插件，提前生成，才能看到<br>hexo主题需要额外安装flowchart插件以支持渲染。</p>
<p>markdown图表类型支持： 流程图(mermaid/flow)、时序图(sequence)、甘特图(mermaid)<br>语法：(需要在开头注明mermaid类型,此处被自动省略)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></tbody></table></figure>
<p>可以看出语法繁琐，记得很多。<br>下面是mermaid插件提供的语法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C{条件a}</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></tbody></table></figure>
<p>更多：<br><a href="https://zhuanlan.zhihu.com/p/355997933">用mermaid画图</a></p>
<p>效果:</p>
<pre class="mermaid">graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件a}
    C --&gt;|a=1| D[结果1]
    C --&gt;|a=2| E[结果2]
    F[横向流程图]</pre>
<pre class="mermaid">pie
    title 为什么总是宅在家里？
    "喜欢宅" : 15
    "天气太热或太冷" : 20
    "穷" : 500</pre>


<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><em><strong>reference</strong></em></h1><p>其他的汇总： </p>
<ul>
<li><a href="https://markdown.com.cn/">官方docs</a></li>
<li><a href="https://kz16.top/md/#markdown%E7%BB%88%E6%9E%81%E6%95%99%E7%A8%8B">终极教程</a></li>
<li><a href="https://www.runoob.com/markdown/md-advance.html">runnoob菜鸟教程高级技巧</a></li>
</ul>
<blockquote class="blockquote-center">
<p>中国人很擅长抽象， 化繁为简是好事，但总会丢了灵魂<br>都是知道了该怎么做就开始抽象。而不是知道了为什么这么做再开始抽象。浮躁。 说到底，还是把握不住精髓。</p>

</blockquote>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>QR-code</title>
    <url>/QR-code/</url>
    <content><![CDATA[<h1 id="Bg"><a href="#Bg" class="headerlink" title="Bg"></a>Bg</h1><p>最近看到一篇帖子，<a href="https://mp.weixin.qq.com/s/KBS5ybzq3DI3eifNs08fNA">优雅的二维码</a><br>不同于我们日常看到的那种，非常的有意思。  </p>
<p>好奇到底是如何做到的。  </p>
<h1 id="QR-BTF"><a href="#QR-BTF" class="headerlink" title="QR BTF"></a>QR BTF</h1><p>这个项目叫 <a href="https://qrbtf.com/">QR-BTF</a> <span class="github-emoji"><span>👈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>点击进入官网。<br>网站风格也很有意思。</p>
<p>其实很早就有生成个性化二维码的产品了： <a href="https://classic.qrbtf.com/">QR-BTF-classic</a></p>
<p>根据README介绍安装后：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/ciaochaos/qrbtf.git</span><br><span class="line">cd qrbtf</span><br><span class="line">npm install</span><br><span class="line">npm audit fix --force</span><br><span class="line">npm start</span><br></pre></td></tr></tbody></table></figure>
<p>结果最终效果竟然是它的本地的官网： <a href="https://classic.qrbtf.com/">QR-BTF-classic</a><br>好吧，感兴趣的去体验一下。</p>
<h1 id="QR-code"><a href="#QR-code" class="headerlink" title="QR-code"></a>QR-code</h1><p>二维码是如何现实一个链接的？二维码怎么通过扫描得到结果？<br>以及 如何实现该项目中的AI生成好看的二维码？<br>这才是本次探究的重点。</p>
<h2 id="二维码介绍"><a href="#二维码介绍" class="headerlink" title="二维码介绍"></a>二维码介绍</h2><h2 id="生成更好看的二维码"><a href="#生成更好看的二维码" class="headerlink" title="生成更好看的二维码"></a>生成更好看的二维码</h2><h2 id="目标检测：识别二维码"><a href="#目标检测：识别二维码" class="headerlink" title="目标检测：识别二维码"></a>目标检测：识别二维码</h2><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><blockquote class="blockquote-center">
<p><strong>流程是由做过事情的人分享出来的，不能是没做的总结出来</strong><br>初创公司 流程不能繁琐，而是直观简洁</p>

</blockquote>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>QR-code</tag>
        <tag>aigc</tag>
      </tags>
  </entry>
  <entry>
    <title>git-note</title>
    <url>/git-note/</url>
    <content><![CDATA[<p>记录一些在使用git过程中常用的操作。<br>从操作中理解git思想。  </p>
<h1 id="提PR时当前分支落后于主分支"><a href="#提PR时当前分支落后于主分支" class="headerlink" title="提PR时当前分支落后于主分支"></a>提PR时当前分支落后于主分支</h1><p>基本上企业应用开发中难以避免的就是当你需要pull-request时发现还需要rebase或者存在confliction。<br>这种情况是因为多人同时开发，从master主分支上拉取分支A，B，C…总会先有人先完成，进行提PR merge。<br>后提交的分支自然是落后于master一个或多个提交。  </p>
<p><strong>解决思路：</strong><br>    假设需要提交的的分支是A。 本地将master分支pull下来，然后merge到自己的分支A里。有冲突就解冲突。<br>    再提交PR。</p>
<p><strong>操作如下：</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ git pull origin master</span><br><span class="line">$ git checkout A &amp;&amp; git pull</span><br><span class="line">$ git merge master</span><br><span class="line">$ git push</span><br></pre></td></tr></tbody></table></figure>

<p>其实该思路反过来也是可以的，即将分支A merge到本地master，然后git push到远程主分支。<br>但问题是：</p>
<ul>
<li>直接操作master主分支实际上在商业软件代码管理上是不合理的。肯定需要master的权限； </li>
<li>会跳过代码review，让系统代码存在不稳定性。</li>
</ul>
<p>另外，如果不想体验，小技巧：需要提交代码的时候再去拉一个分支，然后快速整理提交，保证自己快人一步。哈哈。<br>（分支维护人少的情况下，确实可行。<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>csgo-cfg</title>
    <url>/csgo-cfg/</url>
    <content><![CDATA[<h1 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h1><p>云存储个人csgo的配置，方便随时复制应用：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cl_crosshair_drawoutline "0"</span><br><span class="line">cl_crosshair_dynamic_maxdist_splitratio "0.300000"</span><br><span class="line">cl_crosshair_dynamic_splitalpha_innermod "1"</span><br><span class="line">cl_crosshair_dynamic_splitalpha_outermod "0.5"</span><br><span class="line">cl_crosshair_dynamic_splitdist "7"</span><br><span class="line">cl_crosshair_friendly_warning "1"</span><br><span class="line">cl_crosshair_outlinethickness "1.000000"</span><br><span class="line">cl_crosshair_sniper_show_normal_inaccuracy "0"</span><br><span class="line">cl_crosshair_sniper_width "1"</span><br><span class="line">cl_crosshair_t "0"</span><br><span class="line">cl_crosshairalpha "250"</span><br><span class="line">cl_crosshaircolor "1"</span><br><span class="line">cl_crosshaircolor_b "144"</span><br><span class="line">cl_crosshaircolor_g "195"</span><br><span class="line">cl_crosshaircolor_r "27"</span><br><span class="line">cl_crosshairdot "0"</span><br><span class="line">cl_crosshairgap "-2"</span><br><span class="line">cl_crosshairgap_useweaponvalue "0"</span><br><span class="line">cl_crosshairsize "2"</span><br><span class="line">cl_crosshairstyle "4"</span><br><span class="line">cl_crosshairthickness "0.5"</span><br><span class="line">cl_crosshairusealpha "1"</span><br><span class="line">cl_fixedcrosshairgap "3"</span><br><span class="line">cl_viewmodel_shift_left_amt "1.5"</span><br><span class="line">cl_viewmodel_shift_right_amt "0.75"</span><br><span class="line">viewmodel_fov "60"</span><br><span class="line">viewmodel_offset_x "0"</span><br><span class="line">viewmodel_offset_y "1"</span><br><span class="line">viewmodel_offset_z "-2"</span><br><span class="line">viewmodel_presetpos "0"</span><br><span class="line">viewmodel_recoil "0"</span><br><span class="line">cl_bob_lower_amt "21"</span><br><span class="line">cl_bobamt_lat "0.33"</span><br><span class="line">cl_bobamt_vert "0.14"</span><br><span class="line">cl_bobcycle "0.980000"</span><br><span class="line">cl_hud_background_alpha "0.5"</span><br><span class="line">cl_hud_bomb_under_radar "1"</span><br><span class="line">cl_hud_color "0"</span><br><span class="line">cl_hud_healthammo_style "0"</span><br><span class="line">cl_hud_playercount_pos "0"</span><br><span class="line">cl_hud_playercount_showcount "0"</span><br><span class="line">cl_hud_radar_scale "1.1"</span><br><span class="line">hud_scaling "0.950000"</span><br><span class="line">hud_showtargetid "1"</span><br><span class="line">cl_righthand "0"</span><br><span class="line">cl_color "2"</span><br><span class="line">cl_radar_always_centered "0"</span><br><span class="line">cl_radar_icon_scale_min "0.7"</span><br><span class="line">cl_radar_rotate "1"</span><br><span class="line">cl_radar_scale "0.3"</span><br><span class="line">cl_radar_square_with_scoreboard "1"</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>csgo</tag>
        <tag>cfg</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo blog SEO configure</title>
    <url>/hexo-blog-SEO-configure/</url>
    <content><![CDATA[<h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><p>SEO(Search Engine Optimization) 针对搜索引擎的优化。<br>意义是让我们的博客能被通过搜索引擎查询相关问题的人更容易看到浏览。(换句话说，没有这方面需求的人可以忽略)  </p>
<p>我没有相关的需求，玩的就是一个收藏。毕竟写博客主要目的是技术积累，以及和朋友的谈资  : )<br>至于博客里面甚至留了bitcoin的打赏二维码，相信我，那只是为了好玩。 : )  </p>
<p>出于对技术的热爱角度，也来学习一下，万一以后能用到呢。所以没有和hexo博客搭建写在一起，而是单独另起一篇细细的看下，有用的记录下。<br>如果你有缘看到了，那就一起学习下有哪些方式吧。</p>
<h2 id="添加搜索引擎的认证"><a href="#添加搜索引擎的认证" class="headerlink" title="添加搜索引擎的认证"></a>添加搜索引擎的认证</h2><h2 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h2><h2 id="优化目录结构"><a href="#优化目录结构" class="headerlink" title="优化目录结构"></a>优化目录结构</h2><p>修改站点配置文件<code>_config.yml--&gt; permalink</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">permalink: :year:month:day/:title/</span><br></pre></td></tr></tbody></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">permalink: :title.html</span><br></pre></td></tr></tbody></table></figure>
<p>从而改变博客的目录结构</p>
<h2 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h2><p>网页的代码存在大量空白符，压缩代码可以提高网站被访问速度。</p>
<p>安装插件： <code>npm install hexo-neat --save</code>  </p>
<p>修改<em>站点配置文件</em>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 开启压缩</span><br><span class="line">neat_enable: true</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - '**/*.min.css'</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - '**/*.min.js'</span><br><span class="line">    - '**/index.js'</span><br></pre></td></tr></tbody></table></figure>

<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><ul>
<li>知乎： <a href="https://zhuanlan.zhihu.com/p/344927945">hexo博客高级优化</a>  </li>
<li>NexT： <a href="https://theme-next.js.org/docs/theme-settings/seo">SEO|NexT</a></li>
</ul>
<blockquote class="blockquote-center">
<p>永远拥抱开放，拥抱自由，where we stands as who we are</p>

</blockquote>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>SEO</tag>
        <tag>next-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Doc工具</title>
    <url>/docTool-usage/</url>
    <content><![CDATA[<p>markdown在网页上使用兼容性强，语法简单。</p>
<p>在更复杂的使用场景里面需要RST，也就是 SPHINX和Doxygen<br>比如公司的项目文档。需要描述内容的更多。</p>
<h1 id="1-sphinx"><a href="#1-sphinx" class="headerlink" title="1. sphinx"></a>1. sphinx</h1><h1 id="2-Doxygen"><a href="#2-Doxygen" class="headerlink" title="2. Doxygen"></a>2. Doxygen</h1><blockquote class="blockquote-center">
<p>规则是工具可以被真正使用的前提</p>

</blockquote>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>sphinx</tag>
        <tag>doxygen</tag>
      </tags>
  </entry>
  <entry>
    <title>how to build with hexo</title>
    <url>/how-to-build-with-hexo/</url>
    <content><![CDATA[<p>采用hexo这种静态页面的博客是无奈之举，因为云服务器+jupyter方式确实方便，最终云服务器到期了。<br>看了教程也是头疼，做下来感觉就是”难不会，会不难“。<br>简单来说就是hexo+ github pages，hexo需要用到nodejs+npm，github pages需要用到git。<br>先无脑跟着教程做一遍，再去体会</p>
<h1 id="hexo-github-pages"><a href="#hexo-github-pages" class="headerlink" title="hexo + github pages"></a>hexo + github pages</h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>博客框架</p>
<h2 id="nodejs-npm-git"><a href="#nodejs-npm-git" class="headerlink" title="nodejs + npm + git"></a>nodejs + npm + git</h2><p>nodejs： <a href="https://nodejs.org/en">网址下载</a></p>
<blockquote>
<p>note ： 从官网安装的版本自带npm，无需额外安装。但是通过shell apt安装则需要单独安装nodejs+npm</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></tbody></table></figure>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>git : <code>apt install git</code><br>安装好git后，还需要设置：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name xxx</span><br><span class="line">git config --global user.email xxx@gmail.com</span><br></pre></td></tr></tbody></table></figure>
<p>因为我们需要把生成的博客页面上传到github仓库里面。还需要获取仓库的访问权限，也就是将本地密钥放到ssh key里面<br>生成密钥（rsa）：<br><code>ssh-keygen -t rsa -C email@gmail.com</code></p>
<blockquote>
<p>windows： C:/user/[username]/.ssh/id_rsa.pub<br>linux : ~/.ssh/id_rsa.pub </p>
</blockquote>
<h2 id="github-repo"><a href="#github-repo" class="headerlink" title="github repo"></a>github repo</h2><p>创建github 新的 repo，repo的名字一定是 <em><strong>[your_name].github.io</strong></em></p>
<blockquote>
<p>note： 名字不是上述形式的话，会出现本地渲染正常，但是上传到github pages里面后打开没有任何样式。</p>
</blockquote>
<blockquote>
<p>note: 创建好之后，我们不必根据github的提示在本地初始化一个github仓库。后面设置好之后hexo-deployer-git工具会自动提交到这个仓库。  </p>
</blockquote>
<h2 id="npm-hexo"><a href="#npm-hexo" class="headerlink" title="npm + hexo"></a>npm + hexo</h2><p>安装hexo ， 以下是常用的hexo命令：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo generate # hexo g  </span><br><span class="line">hexo server   # hexo s  </span><br><span class="line">hexo deploy   # hexo d  将本地的hexo generate之后文件部署到github仓库，一般是通过hexo-deployer-git工具自动部署</span><br></pre></td></tr></tbody></table></figure>

<p>这里分为两种情况：</p>
<h3 id="新创建的仓库"><a href="#新创建的仓库" class="headerlink" title="新创建的仓库"></a>新创建的仓库</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-cli -g	  #安装hexo</span><br><span class="line">hexo init your_blog_name  #hexo 新建一个blog项目框架</span><br><span class="line">cd your_blog_name         # 进入blog项目文件夹下</span><br><span class="line">npm install               # 初始化安装必要的文件</span><br><span class="line">hexo server               # 也可以写为hexo s , 意思是开启本地一个服务，可以直接访问 localhost:4000 查看初始化好的hexo页面。</span><br></pre></td></tr></tbody></table></figure>

<h3 id="已经存在github上面的hexo仓库"><a href="#已经存在github上面的hexo仓库" class="headerlink" title="已经存在github上面的hexo仓库"></a>已经存在github上面的hexo仓库</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-cli -g		  #安装hexo</span><br><span class="line">git clone your_repo_addr.git</span><br><span class="line">cd your_repo_addr</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>
<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>在Hexo中有两份主要的配置文件，其名称都是 <em>_config.yml</em>。其中，一份位于 Hexo 根目录下，主要包含 Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。  前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。</p>
<ul>
<li><p>站点配置文件<br>下面是站点配置文件需要修改的地方：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">title ： 网页的名称</span><br><span class="line">url ： https://your_name.github.io/your_name.github.io  #github repo的setting --&gt; pages </span><br><span class="line">root: /  #root在url下面，没有可以加上</span><br><span class="line"></span><br><span class="line">theme：file_name_in_themes  # theme名字就是 themes目录下，主题文件夹名称。文件夹名称可以自己更改</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/your_name/your_name.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></tbody></table></figure>
<p>deploy配置主要是用作hexo d，也就是 hexo-deployer-git插件会用到的地方。<br>主要是用作指定github创建的仓库位置及上传到哪个分支。这里分支名为gh-pages，也可以自己指定。</p>
</li>
<li><p>主题配置文件<br>主题配置文件大部分不需要配置，对页面功能有要求的可以自行了解。</p>
</li>
</ul>
<p>安装hexo-deployer-git： <code>npm install hexo-deployer-git --save</code><br>当我们配置好之后就可以执行<code>hexo clean &amp;&amp; hexo g -d</code>进行部署到github，然后通过url查看效果<br>当然部署之前可以本地localhost:4000查看：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure>

<h2 id="编写markdown"><a href="#编写markdown" class="headerlink" title="编写markdown"></a>编写markdown</h2><p>hexo配置好了，默认主题就是landscape，不考虑换的话，就应该做该做的写博客了。</p>
<ol>
<li><p>创建新的文章： <code>hexo new "post title"</code></p>
</li>
<li><p>source_posts 目录下的xxx.md就是刚刚创建的博客内容，格式是markdown</p>
</li>
</ol>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>我个人建议最好做一份本地文件的存档，真正做到“云博客”，换个场景之后，可以把文件从分支上clone下来，配置好本地环境即可接着编辑博客。</p>
<p>我选择上传文件到main分支，main分支远程仓库暂时没有</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git init       #初始化本地git仓库</span><br><span class="line">hexo clean     # 清楚多余的生成文件，保留原始文件</span><br><span class="line">git checkout -b main  #创建并切换到本地新分支</span><br><span class="line">git add * 				 #将改动提交到本地新分支</span><br><span class="line">git commit -m "upload hexo files"</span><br><span class="line">git remote add origin url       #关联远程分支</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></tbody></table></figure>

<h1 id="更换合适的主题"><a href="#更换合适的主题" class="headerlink" title="更换合适的主题"></a>更换合适的主题</h1><p>theme 主题一直是hexo的亮点。找到适合自己的主题，体面，酷炫，一直是bloger最浪费时间的工作。<br>主题才是真的需要熟悉的地方。我觉得这才是hexo的门槛所在。<br>我自从搭建了hexo以来，感觉一直在花费时间换各种各样的主题，尝试每个主题不同的功能。  </p>
<p>在没找到好看的主题之前，这里就保存一下自己换过的主题用了哪些功能吧<br>因为LiveForCode 简单试用过之后就放弃了，主要是因为感觉还是要注重内容本身，不能搞的花里胡哨（虽然好的页面也可以令人心情愉悦，提升阅读体验）</p>
<p>所以还是从万人敬仰的NexT开始记录吧。</p>
<h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><ul>
<li><p>修改字体大小到0.9：我觉得默认的hexo博客标题字体都偏大，看着很不舒服.0.9我觉得正好。故调整了global字段</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  #enable: false</span><br><span class="line">  enable: true   #改为true应用修改</span><br><span class="line">...</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size: 0.9  # 改变值</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>scheme</code> ：　<br>Gemini， NexT还提供四种页面布局可选，比较中意的是第四种，Gemini。<br>或许后面页面功能玩的熟练了，搭配其他的也可以。</p>
</li>
<li><p><code>menu</code><br>添加了 Home ，tags， Categories ， Archives<br>其余的about，schedule， sitemap， comonweal，还没定义。就不放上去了。但是tags 和categories还是不能用。</p>
</li>
<li><p><code>social link</code> : github + email</p>
</li>
<li><p><code>categories</code>和<code>tag</code>，/tags/ &amp; /categories/ 里面的index.md内 type 字段值要和 _config.yml设置的保持一致。 </p>
</li>
<li><p>首页内容折叠<code>excerpt</code>： hexo7.8版本以上支持自动截图摘要功能，需要以下安装<code>npm install hexo-excerpt --save</code></p>
<blockquote>
<p><code>--save</code>的作用主要是将安装的插件记录到 package-lock.json &amp; package.json中<br>在新的仓库中执行npm install 其实就是读取或生成package-lock.json&amp; package.json 安装仓库的原有的环境里面的插件。<br>然后更改站点配置：</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 10</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>local_search</code> : blog内容搜索，感觉这个功能主要给博客主自己用 安装：<code>npm install hexo-generator-searchdb --save</code><br>然后更改站点配置：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></tbody></table></figure>
<p>在主题配置中启用：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>tag-plugins</code> : 意思是通过给文本、图片等打上一些标签从而实现一些特殊的效果<br>For more info: <a href="https://theme-next.js.org/docs/tag-plugins/">Tag Plugins introduc</a><br>注意： 这不属于markdown的语法，而是hexo在渲染时候的功能</p>
</li>
<li><p><code>emoji</code>:  通过shortcode使用表情， hexo默认的markdown渲染器hexo-render-marked不支持渲染emoji<br>可以通过更改支持的渲染器来解决。但是我不想大动干戈，本着emoji能用就行的心态，装个插件:   <code>npm install hexo-filter-github-emojis --save</code><br>修改站点配置文件：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  enable: true</span><br><span class="line">  className: github-emoji</span><br><span class="line">  inject: true</span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></tbody></table></figure></li>
<li><p><code>flowchart/mermaid</code> ： 在next主题配置文件中找到mermaid 字段，enable 改为true<br>尽量使用mermaid ，似乎flowchart语法，在手机上浏览网页会让页面错误。</p>
</li>
<li><p>插入图片： 站点配置文件中post_assert_floder改为true， 这样hexo new post时就会创建对应的文件夹。<br>注意： 插入图片时应该使用 post_floder_name/image_name.type 路径来引用图片。 插入图片不需要安装其他任何插件，不显示就是路径设置错误  </p>
</li>
<li><p>文章置顶：<span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/im0o/hexo-generator-index-custom/blob/master/README_zh.md">reference</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-custom --save</span><br></pre></td></tr></tbody></table></figure>
<p>站点配置文件中的index_generator部分不需要改，完全兼容！<br>在文章开头添加 sticky 或 top 参数， 其值可以是 true（置顶） 或者 数字，数据越大，越排在前面。<br>hide参数可以隐藏文章</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Ideas</span><br><span class="line">date: 2020-05-06 09:59:10</span><br><span class="line">tags: ideas</span><br><span class="line">categories: daily_note</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<hr>
<p>(end)</p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><p>在使用NexT中参考了很多前辈的配置过程，在此感谢！<br>hexo官方文档： <a href="https://hexo.io/themes/">主要是选择主题</a><br>NexT官方参考文档： <a href="https://theme-next.js.org/docs/getting-started/">Getting Started</a><br>比较全的主题功能配置： <a href="https://www.meijindong.com/posts/3688165485.html">点此前往查看</a><br>hexo提供的plugins： <a href="https://hexo.io/plugins/">插件一览，要啥找啥</a></p>
<blockquote class="blockquote-center">
<p>集中力量办大事无法调动积极性，只会滋生投机份子</p>

</blockquote>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>i2c-简记</title>
    <url>/i2c-note/</url>
    <content><![CDATA[<h1 id="i2c的特点"><a href="#i2c的特点" class="headerlink" title="i2c的特点"></a>i2c的特点</h1><p>精简版，但遇到问题时从特征上分析可能看不出原因，多用来回顾</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>两根线，SDA(data) + SCL (clock)</li>
<li>多主多从串行同步通信总线</li>
<li>上拉电阻 （空闲时为高电平）</li>
<li>线与机制</li>
<li>上升沿采样，下降沿变化<ol>
<li>SDA在SCL为低电平时才能改变</li>
<li>SDA在SCL为高电平时保持，用于读取数据</li>
<li><strong>START</strong>标志– SCL为高时，SDA由<strong>高</strong>变<strong>低</strong></li>
<li><strong>STOP</strong>标志 – SCL为高时，SDA由<strong>低</strong>变<strong>高</strong></li>
</ol>
</li>
</ul>
<h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><ul>
<li>Start &amp; Stop<ol>
<li>如果产生重复起始条件(Sr)而不产生停止条件，总线会一直处于busy。</li>
<li>一般Start&amp; Stop 由 主机产生。</li>
</ol>
</li>
</ul>
<p>线与 和 多主<br>如何保证主机或从机发送数据时，其他从机或主机不会抢断？<br>ACK的过程是怎样的？ SDA被释放，此时SCL没有被释放， 那么SDA线的决定权为什么会来到从机？ 从机如何判断需要可以ACK<br>时间同步？  clock stretching</p>
<ul>
<li><p><strong>read</strong></p>
</li>
<li><p><strong>write</strong></p>
</li>
</ul>
<h1 id="i2c-spec-note"><a href="#i2c-spec-note" class="headerlink" title="i2c spec note"></a>i2c spec note</h1><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><strong>reference</strong></h1><ul>
<li><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.jianshu.com/p/95f53ca2724e">i2c挂死分析和解决方法</a></li>
<li><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://zhuanlan.zhihu.com/p/149364473">i2c spec 翻译</a></li>
<li><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.nxp.com.cn/docs/en/user-guide/UM10204.pdf">原文链接</a></li>
</ul>
<blockquote class="blockquote-center">
<p><strong>新闻已死</strong>  </p>

</blockquote>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>i2c</tag>
      </tags>
  </entry>
  <entry>
    <title>For Life</title>
    <url>/note/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Warning！！请停止窥探隐私行为！！您的IP已经被记录！！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7538cf3362b745b75b41b1ce7a88943a9ac95b73ff3813bb56b0c71a4f252bff">d370c5caa6f82aab46a5e5036abddd95f3748a1f868670e6c92a5d7157303714555794d1e8593b3200afee48d526c32cf6d2539a053be8345bb623863bfe1ef2bc8e6db1fbdc25d588cb61293da0bdd77db069d154eea9ea2f1771f1d34f939d132cd07a4de316991cf6f3acaa0568fcb619a20d8aa644e2ab1e0b6a5c2ee52a2135163afdae434b83a24ec668d23721b5d004dcb42d2b285dd476a9fc3ac4b5ed7a4e2e1eb2749ee792ccff2b58aae0e4eb2bee35baecd60d14c8ef577e3ce721ab6aaafd83aaff48fa2b842588e7004d8f5ece9072cc02eaa48e8539fa6d35af6382376c3ce50cc340e9a80e8784cee43367ebbfe86bd62f48dcf5f3ea6ca5c86e468fc11cedbff07e50295b477613bda2d1a30b26d540c3fb19f363499f0c01424f13971ca787853bbdfd1c17e48ddebbf8fd13ddd761fcb55e067f38775c52e9da16be65e5dd41a60666a45a8a1e160cba89f39088265ceaac036b87cf5fc9293b79e6ec2b337c4a253b2a6572ba0449e90a0b81596516c2528f69a0973f824087d4ed965027c66a7219492f5cb64c6f231e4f555596c8695900fbbeba1735b11a816b1077df741820be510404d5af0a6a85e231138b9f895e7531ad68a8667f76ab3fad6d431fd1f217d1c8c60c6fa9970808e8794e5c9865e23ff1abe6f0b761d31a218e156febcc50387a32c905da71c9d9aa1c3d8acc4c9a71f94ad81401dda185c92da060d750870d69b52eeb0c7d80fa8fe05173ab32cb7bf56307f0667bae817a532f14f762c24ff0ab4217cf17877d5d737f2746f73b0d371eab629a33a72995017b25b095f1fa82c96fd3409872000d84cfe6ce2f799aabebf7e21255420afef30a349e58499fe1357d629c048372cbd8246ae99ba00ba44835678d592dac92ad92452b38d3daad7a53616fb07ffd044b4fdc1b69b226a5cd77cb5e6fb4e1a7cfa216c67e04b7c8546f6b6ee6d949916de025299eaad2f44aeb186cda9f8092b22d7e739b8b49500df37a2c5d56151d193c8e0e1b3f438da16af0dbd560a32f1b922d69f009ef8c17eda74869cee7367ee34fd11852bf98c1b991ee33b78862aa8d7d9574c5f62923dfe27e0b9340b01089c95cfd44efec0cd74a4a9353080568d51c011a1e4883e0119698e0fa2011f3d988b24c65f6f2fefe3ecfd5c8a141c94cda8716c5e8e964cb2408cbf156092b48a16f2749cdbf7315fab452eb6bc804d37bc1ec45de02649e516a6b2accd3ddfdf945eb59648fbf9d2243e39b232299df57a3b25ee80b34c0f9552093d9e38cdabd031bc2afd0acc01f807959952640df7744ab0d3b59bd1e2ad43b8a5ae3dbb2c327a35d76e925ed32080ea8412db186563a7154e09f6b8fd3f478db5473ef797e9b35468ce215ce31e1c8a7b32fed8dae2e4b5e950148a7339c7bd97b85a9b4406192c3f90ded920e8ed7af8c03d5fa9328f61dc9d5459848851d015c5a25e79fc84c2519e6f4a0c69808a53d14739adc136342070554bf304337e1d8fc4770cc0a6589361dd41c54a0171dd35431bbd0e22a6bb83374bb5d9cc69e640776e4022a52c24735d0c07f4e945e252f5e2e4d9b650cd99a3586fee36253ac990b2e6ba4625093af5e1673e25ced8da0ced8b0e1e25d80246aebdb17334962cc4f281cc02670cadf0bf8968b88a8957b71c9052b9b63e24d1d751c070bd87c448d7708b9d649f5bc18e94a71a7fd2e7853817a3659c713ae28c7d155d9e6bd0ea99e78dc562e13b454897a84d7fa7ae8c92da7db18437a26947883163b5bd25ecc8d9e57b5a1af8fd83b18346ca239852c36d861fb89b685bcc73465c6b07acfdafd033f2575fadf79d8059c45439e49ba6dca3940f7bc780ab90be5a73727849cda4f4d0baf83655014bb9985f9c6ca3f2532c30c6919ee3eaa76ba830bc28741c5cf1a0b9e5e50867dc1a301fc8aaafd692c68f0fb6d89dd3fa7473859b2c3d35115f0dfaedcde0db5c32e037d6f94c0c063ee31245cdfad54b20759016b07df7095ac678a4fea24fa218b8dbeb3b5f979bdbe45f2d60af22131224d6bc8891cb3b108d33010a28e721c6a1d5377686510069329fe8b0357bee6a142ec08005c0f058e4faf23bf09102f2715ce316b46ad69187f9c84af707a95f25897df10594b3221f39ab2acb35d29b97bb146579de390717a5701d770fe4cb08eeaaceab9e81f0dfb2b2e9b91c09080da7573901ffa9b79e49d32f72eeb35a7c0ef3f622d87d53b3d8cdb35ddaf3b373faa5b462d21a7f2201baf61e1793c0ed44bc79476079cd1f01d07c84c8ec96ee5b53d99025af6e7b9427962f6cd1eaa0d39e1f39e3e0fbb00316c4719ad76c9347c3eda782889d79d225eabfac82e97c96c4cfc668e1d6bc660c9ce5e65b8da13a0c1cb7230bdcb6cfafe7d19dac6a133a5ec372f46c4e5e9fc185a29fd56e33810218c9ff5309445e2c0ff0d75c46a4e7ec9d125a68b01bafb1121476068144d4156caaf553140c81f3ba0c103c51ec015e46757eb893fc53aa5a573087731069cb9a7daf69b827d43b36af9ab38700079e6c2ae182061efea4c5a83c64895d40443337e355399ec8e83cfbabc6530aa2b8ac613807215a2d6c0c909971852e8062104081a5b4476b689171cec38cef6bce1e7e5e9ac337a6b6e897743d0b1a4dc813ec0314cf2f6c4c91aed8764619baa54cb4ac0a69b00f41c002b5b16eba71513b95f54188b3c67c31d4c806b75faa09292b5d4a397c74341d5bda5627c28310fff15288558c754ee1cf1e16c18035c4bd288d688626137b5e9267f9d8065bff8487b6f4614245c30bae39466fefae09437cbd1a6c9c96ed6deca3d2a5e04bdddd231829a63d0b4cb30497fda8bddc5cf82ba5715fd7925532c1e3e9a0a206aba49742e30ddafacdb4b009334794ab66c730f6a49806b3c495f82747759c05f045b41e1d2c5e49e23d751937629b6e6686c445a2818dfd3bb4a623fcad682861653b4ecccca3d1fb260beb0be423de32a3575a620261280768d451f20b021775cdf507ec52d06b09f23b2bb573ac56312afcab66a638bb1e9d78cb88d5638a6a6fdbc5046c9918116660ca4abf382c8255322e76f90322d453090f23b32be6ce3b875acf0113695368392e498482de0a6b886f8df2e0fe3a93d8f4cd9ba9d507c691a59ccc05f0112ccf47356f004de12dffd917d47849dffd55bb929fa84b0ceaa41bb4182a3aa5a04d354186e221842e1cbbf2758d9eb9675068216dab8586fddbb458ebabaea6bc90c2c22691609ca1748813e4eb007020531da55afbb383a0f89a339187fa7988eec798fa7887a4db4995e2cb5c5bb44956885a47a12af235aab8f72385b331fcb778d66c08e22e0d2829006c4952efcc155bc63199e0a76f3903bf0012961213bc064c6c45269e05938393756dafed6cca2a636de9c3e83e066cbf25915ff9708b5147b3a2ee8009212bc966c2ffc5a3a78f7bc2c8a26ad42429608899fb675a703a79ede5ee22b1923f300665d509566d9666dc7f2ffd2638afd3a65f1bfd8a77e284a5aa542922170d06251f0cdd85c7d08899cde9bb299d35445b29c2fa66b50133f6f6920aef0d0fc6b9ff81f8f69238dc48829f69ba76a6db21d110f4e72124d6bac624534521aa91110c101c75c9e4ff1f6731590b2de33bb31e16557031c8cc659a6c3629c545e68f373c5ce80af6e319e1387565a4b9c25a5f43a0034466297fcfc09a6831c594fa0efa990b7d39ea9ce5e09f607edc59989bb202776ccdd255e95b9f34ba268f8e6dd6ffd0bde998acb77383d79fee6130bcca117cdb0435173a0acdba15683beb96714a821f4a11820066a91fca5c2933264b3ddd840a308c8f7d262938ced42b53c63df00d29a1da03d0e32edf7e49671c4de37452c10e7ef51dcda051e0ab480347573075efc923fc47622f42366eb9c51a0a982667188846338b4e3ba9752f218f74fcc6b5dffd32db8e26ffdfafc80cec20f7cc549cdc5e432ea1bc71f0d8e909b4e4cc54766fd7d5a6afac1a9a662f33f998079354a943fa0fd785733c0e288623db9ea3708d0702118dc5c6470d22955e39bc87998e6a5ba51d90fb66eab94444e6faeb51d6a6f7e3a9e6427f915c19340b0b5a8018df4d5a32249fec93bcb64b18b9a9304d3dad3ebfc8a87e7bd9f14b0baf11ac86ffbd47aa47e6bf764c9fa333e915c5b2a65e56bb485e749eebebb7f9491dc6ead07816afa328c42464af51b2ebef60e514ddcad4f74e4de5a6b16748b0c8bbbff10aa40dd31f64a76a6f4b02148923b449289879b615959cdeb361f69c4921947160f1a63f9deed8a3dd9aed6b814b23f5f12ff8ca063db087e006edd945a5f628088e8638c9d11f8ccff5f06018ab7593a0a84aa7e6789f130b494fdf728590fac78d2e3ef13e85b07b7f4d85517aeefda533765e5c8341c13c333bbc1d16f26a6ab1734d12b0f2dddd8b8bcfff39d358110e4f96f2842c7b4f6b29b998f84adcc8db50bbec9052b1890ca34dc6ccaa6026b69b3b7a4c169e22c535f0bbbb188d9886ca20fe97af6a00760ea5c5bc465c00bc9fb1fa1575f56c2d47ccb0f8e81c80dd5903a0f4369f66afa72009093d5eccdbf7613713c1181489d683746a4a58eea895002ed841bc859b46bf63144401fcf93ebc0ef68147d2fce355f551c9082aa40d7a29c41c9a4e93050437d217eb5f2adb9bb34a81cba6b34fda95120227ff5b317847139dd420162cc58d704028c0dafc7b80014f7f8667f8e3b1a19e684c4986c13db941db95fcfa73e9872f42d08862b006388c8ab46f877884d323518c31674ad74f4563f32cf50ee7e426ee7005281ea2da2d8979c3501bd83a85cb8fb74f277d62892dc9b1cbee8b42faae55d631db2c185877d20faf40a0837570a69fff7419dba935f1879ca19319283c48d1e4a37515d0e661139c6942b326bb550a3ddb2c4b62f4ea0013c73d8e9e982d371f9af74481f34fa045c32c6638597fc830c861b4e8a9f30aa566a719b588e5d608b27f724d7efcb41b77f49fb0dbafb940a277630653a2f19d9724b8ccec931726a891213dd3915bd545b4462f97a6efb2e8caa7786cb7b3286e7c0139b7e7603bfa3555f3f871884c239e009710ff01e99d37e61dd89cbe1aaee96e87bd8e00f831ee9252eabf09811b6922e5a71d539b10b203bf71133ce59b0ad</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Ops！这篇文章博主似乎不想透露！</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Ideas</title>
    <url>/ideas/</url>
    <content><![CDATA[<h1 id="智能红绿灯"><a href="#智能红绿灯" class="headerlink" title="智能红绿灯"></a>智能红绿灯</h1><ul>
<li>多车道识别</li>
<li>车辆识别—用于变灯判断</li>
<li>多路口红绿灯连接—用于潮汐车道。</li>
</ul>
<h1 id="车车互联"><a href="#车车互联" class="headerlink" title="车车互联"></a>车车互联</h1><p>车车娱乐系统<br>场景： 提前预警； 信息互通</p>
<h1 id="密码管理平台"><a href="#密码管理平台" class="headerlink" title="密码管理平台"></a>密码管理平台</h1><ol>
<li><p>通过手机号码掌管所有已注册的应用或平台</p>
</li>
<li><p>隐私管理， 手机号码多一层加密，对应用或平台进行隐藏</p>
</li>
<li><p>记录所有平台的密码, 支持一键修改</p>
</li>
<li><p><strong>如何更好的记住密码，方便查询密码</strong></p>
</li>
</ol>
<h1 id="不同平台互联，传输文件开始"><a href="#不同平台互联，传输文件开始" class="headerlink" title="不同平台互联，传输文件开始"></a>不同平台互联，传输文件开始</h1><p>windows跟手机传输文件，只能通过第三方软件的文件传输功能，手机发送文件到文件传输，windows打开软件文件传输接收文件，然后另存问到windows<br>这样很烦， iphone的 隔空传送其实任何平台都应该支持。</p>
<h1 id="针对小公司的云存储平台"><a href="#针对小公司的云存储平台" class="headerlink" title="针对小公司的云存储平台"></a>针对小公司的云存储平台</h1><p>bg：小公司缺乏技术人员，文件保存杂乱，可追溯性差， 公司的积累事倍功半。<br>客户信息，交易记录，经验积累等生产资料。这些丢失对于一个公司的损失很惨重。<br>我认为任何正常的小公司需要一个存储重要文件的地方。还可以有效的分类管理，方便查找和预览。</p>
<h1 id="通识知识娱乐化"><a href="#通识知识娱乐化" class="headerlink" title="通识知识娱乐化"></a>通识知识娱乐化</h1><p>受启发于 freecodecamp.org 该组织致力于将编程知识模块化，做成可实操可视的形式，大大提高了学习兴趣和效率。<br>将大学教材里面的 数学，物理各种理科知识用生动的形式展现，方便学习。<br>这种形式不局限于 动画，视频，游戏，模拟界面，重在让学习者学的过程轻松，激发兴趣，记忆深刻。<br>知识内容可以延伸到从幼儿园，和小学教材开始。积攒人气和投资。<br>把死板的知识变得生动。刺激教育改革。</p>
<ul>
<li>知识培训系统框架： 支持文本，gif，互动视频媒介操作，编译器&amp; 编辑器。</li>
</ul>
<h1 id="AR-产品"><a href="#AR-产品" class="headerlink" title="AR 产品"></a>AR 产品</h1><p>终极目标，希望能把AR真的落实到实际应用。让人们用的起，用的便捷。<br>比如，如同普通眼镜带头显功能，带扫描功能，带存储和回放功能。</p>
<p>2023-6-6： apple vision pro实际上已经实现以上功能，望周知~ 但是价格太贵</p>
<blockquote class="blockquote-center">
<p><strong>思考具有局限性</strong><br>你认为的正确只是在你了解的知识体系中的正确</p>

</blockquote>
]]></content>
      <categories>
        <category>daily_note</category>
      </categories>
      <tags>
        <tag>ideas</tag>
      </tags>
  </entry>
  <entry>
    <title>rtos学习</title>
    <url>/rtos-issue/</url>
    <content><![CDATA[<h1 id="ISSUES"><a href="#ISSUES" class="headerlink" title="ISSUES"></a>ISSUES</h1><h2 id="加个pintf后一切正常–rtos里面经常发生的"><a href="#加个pintf后一切正常–rtos里面经常发生的" class="headerlink" title="加个pintf后一切正常–rtos里面经常发生的"></a>加个pintf后一切正常–rtos里面经常发生的</h2><p><strong>问题描述：</strong><br>在通过控制电源管理芯片20087对摄像头进行上下电过程中，调用写好的写20087寄存器的接口。<br>写20087在 rtos内，调用处也在rtos处。<br>循环四次上下电四次。  </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">for(camIdx = 0; camIdx &lt; 4; camIdx++){</span><br><span class="line">	// 上电</span><br><span class="line">	powerState.camIndex = camIdx;</span><br><span class="line">	powerState.camState = 1;  // power_on</span><br><span class="line">	appRemoteServiceRun(</span><br><span class="line">	APP_IPC_CPU_MCU2_0,</span><br><span class="line">	APP_REMOTE_SERVICE_CALI_PARAM_NAME,</span><br><span class="line">	APP_REMOTE_SERVICE_SVM_CAM_POWER,</span><br><span class="line">	&amp;powerState,</span><br><span class="line">	sizeof(S_ImoSvmPowerState),</span><br><span class="line">	0);</span><br><span class="line">	appLogWaitMsecs(500);</span><br><span class="line">	// read to judge</span><br><span class="line">	Board_i2c16BitRegRd(i2cHandle, 0x29, 0x0, &amp;reg_v, 1, BOARD_I2C_REG_ADDR_MSB_FIRST, 100);</span><br><span class="line">	if(0x29 != (reg_v&gt;&gt;1)){</span><br><span class="line">	// 出现异常进行断电</span><br><span class="line">		printf("#streamFlag# camIdx = %d cause i2c error!!, reg_v = 0x%x \n", camIdx, reg_v); reg_v = 0xff;</span><br><span class="line">		powerState.camIndex = camIdx;</span><br><span class="line">		powerState.camState = 0;  // power_off</span><br><span class="line">		appRemoteServiceRun(</span><br><span class="line">		APP_IPC_CPU_MCU2_0,</span><br><span class="line">		APP_REMOTE_SERVICE_CALI_PARAM_NAME,</span><br><span class="line">		APP_REMOTE_SERVICE_SVM_CAM_POWER,</span><br><span class="line">		&amp;powerState,</span><br><span class="line">		sizeof(S_ImoSvmPowerState),</span><br><span class="line">		0);</span><br><span class="line">		// printf("#streamFlag# camIdx = %d cause i2c error!!, reg_v = 0x%x \n", camIdx, reg_v); reg_v = 0xff;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line">printf("#streamFlag# test content \n");</span><br></pre></td></tr></tbody></table></figure>
<p>没有加结尾处的printf后，testcontent 无法打印出来，相当于没走到，加了printf后竟然正常打印testcontent了！</p>
<p><strong>问题分析:</strong> </p>
<ol>
<li>接口appRemoteServiceRun()中加打印跟踪流程<br> 跟踪下来，发现testcontent无法打印出来时，appRemoteServiceRun里面 Semphre_pend() 加锁函数没有执行。</li>
<li>根据上述分析，分析一下加锁函数没有执行：<br> appRemoteServiceRun被初始化好了之后就会被很多其他地方调用，因为它是其他核跟mcu20通信的接口。<br> 诊断的函数上电之后初始化完成之后就开始调用该接口。几乎同时会调用，而且循环调用，速度极快。</li>
</ol>
<p><strong>结论：</strong>  </p>
<blockquote>
<p>appRemoteServiceRun被诊断接口抢占，诊断接口会直接进入死循环，无法释放锁，所以一直没法继续执行下去。<br>跟猜测的 加不加printf 无关。加了之后经过测试显示依然无法继续执行。所以猜测就是错误的</p>
</blockquote>
<blockquote class="blockquote-center">
<p>学区房是阶级的象征 </p>

</blockquote>]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>rtos</tag>
        <tag>TI</tag>
        <tag>tda4</tag>
      </tags>
  </entry>
  <entry>
    <title>personal_info</title>
    <url>/personal-info/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Warning！！请停止窥探隐私行为！！您的IP已经被记录！！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="57c3061e84c184fec8a7b85fc96174879bcad58debf57db025339d8138b9d2cf">d370c5caa6f82aab46a5e5036abddd95767a41255db1361ce5665e7b680a8591f08722b51c9218e25ae434991e0609e5f3016705c61a860cc18408aa3992031bfded18eadb1385d17d2bc3733d21189136633822bd3ebc3489776135a3fd2973a6c2c0a054a123546100456debaf0e62763adc22f5f698e8461ed55b894fd49c83d3496bd35d82c174d3466e3a047151a3933da8ac5cdfe7865d2a69c8087cfecd946d876c734c0d8709503fe80bf31079556e8e3c36b16ef6cbca979a998ab630f14dcd7bdc257b9ce1399ff02961e3878ddadb292da7c4083a99a677e0854afe5fa0e3316654289e2ebef9b37e181bce34dc68e433dbf60038505d38ca8e49507ea268c4a5229944ca8d75b3c74d8dcf9965ef6ccd7cf9d9ae4b07b1d861a3051d97893a75c05bced6ff6b4bd5d878</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Ops！这篇文章博主似乎不想透露！</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>stable diffusion</title>
    <url>/stable-diffusion/</url>
    <content><![CDATA[<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><p>为什么可以从文字输出图像？<br>首先得复习一下机器学习。</p>
<h2 id="Relate"><a href="#Relate" class="headerlink" title="Relate"></a>Relate</h2><p>当下ai绘画主流产品：MidJourney ，stable-diffusion， DALL·E</p>
<table>
<thead>
<tr>
<th>产品</th>
<th>特点</th>
<th>共同点</th>
</tr>
</thead>
<tbody><tr>
<td>MidJourney</td>
<td>收费</td>
<td>三款产品都是可以根据text形式prompt(提示词)来生成图片也可以根据图片来修改。</td>
</tr>
<tr>
<td>DALL-E</td>
<td>openai 产品之一，著名的是其语言模型gpt-4 ，ofcourse，收费。</td>
<td>^</td>
</tr>
<tr>
<td>stable-diffusion</td>
<td>开源免费，适合商用</td>
<td>^</td>
</tr>
</tbody></table>
<h2 id="Requisite"><a href="#Requisite" class="headerlink" title="Requisite"></a>Requisite</h2><ul>
<li><p>潜空间</p>
</li>
<li><p>UNet神经网络</p>
</li>
<li><p>调度算法Scheduling</p>
</li>
<li><p>扩散diffusion</p>
</li>
<li><p>生成过程<br><img src="/stable-diffusion/image.jpg" alt="图像生成过程"></p>
</li>
</ul>
<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Prompt</td>
<td align="center">提示词（正向）</td>
</tr>
<tr>
<td align="center">Negative prompt</td>
<td align="center">消极的提示词（反向）</td>
</tr>
<tr>
<td align="center">Width &amp; Height</td>
<td align="center">要生成的图片尺寸。尺寸越大，越耗性能，耗时越久。</td>
</tr>
<tr>
<td align="center">CFG scale</td>
<td align="center">AI 对描述参数（Prompt）的倾向程度。值越小生成的图片越偏离你的描述，但越符合逻辑；值越大则生成的图片越符合你的描述，但可能不符合逻辑。</td>
</tr>
<tr>
<td align="center">Sampling method</td>
<td align="center">采样方法。有很多种，但只是采样算法上有差别，没有好坏之分，选用适合的即可。</td>
</tr>
<tr>
<td align="center">Sampling steps</td>
<td align="center">采样步长。太小的话采样的随机性会很高，太大的话采样的效率会很低，拒绝概率高(可以理解为没有采样到,采样的结果被舍弃了)。</td>
</tr>
<tr>
<td align="center">Seed</td>
<td align="center">随机数种子。生成每张图片时的随机种子，这个种子是用来作为确定扩散初始状态的基础。不懂的话，用随机的即可。</td>
</tr>
</tbody></table>
<h2 id="env-build-windows"><a href="#env-build-windows" class="headerlink" title="env build - windows"></a>env build - windows</h2><p>click here <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">official guidance of source code</a></p>
<ul>
<li>写在前面的tips<br><strong>请确保显卡驱动更新+ 更改pip源 + git配置，这样安装过程才会一帆风顺</strong><ul>
<li><code>更新venv目录下的 pip版本</code>或<code>pip下载库connect timeout</code>常见问题:<br>  <code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code><br>  或 修改<code>pip.ini</code> (<code>C:\Users\name\AppData\Roaming\pip\pip.ini</code>)：  <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">	index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure></li>
<li>git添加代理<ul>
<li>飞机场用户 <ol>
<li>到飞机场设置中查看本地监听端口 </li>
<li><code>git config --global http.proxy socks5://127.0.0.1:[port] #git全局设置</code></li>
</ol>
</li>
<li>VPN用户<ol>
<li>端口是配置vpn是设置的本地监听端口</li>
<li><code>git config --global http.https://github.com.proxy socks5://127.0.0.1:[port] #专门给github设置</code></li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>全自动安装包 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://nerdschalk.com/install-stable-diffusion-windows/">详细的指南(包括支持AMD显卡)</a>  </li>
<li>manually install： (先犯错，再总结) <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># prepare `python3.10.6(更新的版本不支持torch)+git`</span><br><span class="line">git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span><br><span class="line"># 更改pip源 + git配置代理（如果没有使用vpn，按照下述，修改目录下launch.py）</span><br><span class="line"># 修改 webui-user.bat :  set COMMANDLINE_ARGS=--xformers --no-gradio-queue</span><br><span class="line"># run webui-user.bat  #不需要管理员权限运行</span><br><span class="line"># #重新安装basisr (下列都可省略，如果出现对应错误情况下)</span><br><span class="line"># #run webui-user.bat</span><br><span class="line"># 等待下载好模型</span><br></pre></td></tr></tbody></table></figure></li>
<li>完成安装! 本地浏览器进入 <code>localhost:7860</code> 或<code>127.0.0.1:7860</code><br><img src="/stable-diffusion/finish_install.png" alt="安装完成"></li>
</ol>
<h3 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a><strong>Trouble Shooting</strong></h3><ul>
<li><p><code>Torch is not able to use GPU</code></p>
<ul>
<li>尝试更新显卡驱动<br>  官网下载最新驱动 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://www.nvidia.in/Download/index.aspx?lang=en">链接</a>    </li>
<li>更新后删除或重命名stable-diffusion/venv目录</li>
<li>重新执行webui-user.bat</li>
</ul>
</li>
<li><p><code>RuntimeError: Couldn't install gfpgan.</code><br>如果一开始遇到pip install慢或者失败问题，建议按上述修改<code>pip.ini</code>。<br>根本原因是与github连接网络不稳定，小飞机虽然有点用，但全局模式用处不大，可能会成功，但是龟速+失败多，还是建议以下方式：  </p>
<ul>
<li>方法1 ： <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://github.com/CompVis/stable-diffusion/issues/506#issuecomment-1438585062">resulotion</a><br>  将launch.py 中 <code>https://github.com/</code>替换为 <code>https://ghproxy.com/https://github.com/</code></li>
<li>方法2 ： 给git添加代理</li>
</ul>
</li>
<li><p><code>No module 'xformers'. Proceeding without it.</code><br>缺啥补啥，在webui-user.bat里 <code>set COMMANDLINE_ARGS=--xformers </code></p>
</li>
</ul>
<p>关于 xformers : <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers">xformers github page</a><br>简而言之, xformers可以加速图像生成速度,减少VRAM使用, 2023.1.23之前都是需要用户手动安装的,之后<strong>AUTOMATIC111</strong>版本的webui<br>集成了自动安装xformers,但是需要再启动command里添加 –xformers以激活该功能.</p>
<ul>
<li><p><code>ModuleNotFoundError: No module named 'basicsr.version</code><br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/1598#issuecomment-1501010130">solution</a><br>重新安装basicsr<br><em>该错误根本原因是python库里面没有basicsr库，这个肯定是安装的，就是用的时候没有。<br>由此可以想到，这是本地环境有问题，而非工程问题。应该是没有装到正确的地方。这个问题大部分情况不会出现，因为本人电脑上装过的python太多。  没有其他的裸机去验证。暂时就这样吧。</em></p>
</li>
<li><p>打开后输入prompts时网页右上角显示: <code>Something went wrong Expecting value: line 1 column 1 (char 0)</code>,且运行出错<br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/9132#issuecomment-1488840066">solution</a><br><code>set COMMANDLINE_ARGS=--xformers --no-gradio-queue</code><br>stable-diffusion支持生成gradio链接, 目的是可以在其他设备也可以访问该服务. 如果本地开了vpn代理,则无法生成.<br>方式就是关闭代理,或禁用gradio生成.</p>
</li>
</ul>
<h2 id="env-build-linux"><a href="#env-build-linux" class="headerlink" title="env build - linux"></a>env build - linux</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install wget git python3 python3-venv</span><br><span class="line">bash &lt;(wget -qO- https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh)</span><br><span class="line">sh webui.sh</span><br><span class="line">#check webui-user.sh for options</span><br></pre></td></tr></tbody></table></figure>

<h2 id="env-build-服务器上通过接口调用"><a href="#env-build-服务器上通过接口调用" class="headerlink" title="env build - 服务器上通过接口调用"></a>env build - 服务器上通过接口调用</h2><h2 id="use-case"><a href="#use-case" class="headerlink" title="use-case"></a>use-case</h2><p><img src="/stable-diffusion/aweful_picture.png" alt="垃圾的图像效果"><br>上面图片就是我刚进入网页时随便输入一段话然后生成的结果. 简直…不堪入目 <span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>!!!!</p>
<p>如何进行改善呢?<br>影响图像效果的因素： <code>参数，模型，prompt</code><br>先来熟悉stable-diffusion-webui上面的一些模式</p>
<ul>
<li><p>text2img</p>
</li>
<li><p>text+img2img<br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://blog.51cto.com/tinygeeker/6185988">几种模式的解释</a><br>以下仅作为巩固记录：  </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>resize mode</td>
<td>依此是：<code>拉抻</code>，<code>裁剪</code>，<code>填充</code>，<code>仅调整大小</code>，缩放模式指的是当原图和要生成的图的宽和高不一致的时候，选择的缩放模式，一般选择裁剪，如果原图和生成图的宽高一致的时候，选择任意均可</td>
</tr>
</tbody></table>
</li>
</ul>
<p>一些工具，可能以后会用到： </p>
<ul>
<li><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://vocus.cc/article/640ee135fd8978000155ef23">controlNet 工具</a></li>
</ul>
<hr>
<h1 id="应用–换装预览"><a href="#应用–换装预览" class="headerlink" title="应用–换装预览"></a>应用–换装预览</h1><h2 id="Scenario-1："><a href="#Scenario-1：" class="headerlink" title="Scenario 1："></a>Scenario 1：</h2><p>淘宝商家给出衣服图片，用ai绘出穿着衣服的人物模型，支持各种场景和人物姿势.<br><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://www.zmo.ai/aimodels/"><strong>AI models</strong>样例</a></p>
<ul>
<li>Details</li>
</ul>
<ol>
<li>随机模特模型生成</li>
<li>提供的照片衣服模型结合</li>
</ol>
<h2 id="Scenario-2："><a href="#Scenario-2：" class="headerlink" title="Scenario 2："></a>Scenario 2：</h2><p>消费者网购衣服，需要预览选中的衣服的效果，不同场合，不同姿势。</p>
<ul>
<li>Details</li>
</ul>
<ol>
<li>消费者人物模型生成</li>
<li>选取衣服模型提取</li>
</ol>
<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>如何生成不同的models？（训练，）<br>生成的models如何与图片中的衣服结合？</p>
<ol>
<li>client<br>选择衣服，选择预览人物</li>
<li>server<br>根据所选衣服和预览人物，生成提示词，填入后调接口进行生成</li>
<li>生成提示词精准度</li>
<li>提高生成速度</li>
</ol>
<h1 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h1><p>(待续)</p>
<hr>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a><em><strong>reference</strong></em></h1><ul>
<li><p>模型下载 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://civitai.com/">点此进入</a></p>
</li>
<li><p>我从这篇简单的入门 <span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://zhuanlan.zhihu.com/p/610094594?utm_id=0">点此学习</a></p>
</li>
<li><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://zh.wikipedia.org/zh-cn/Stable_Diffusion">wiki是一个很棒的学习方式</a></p>
</li>
<li><p>好玩的AI社区：<a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">这是stable-diffusion的一个样例, 还有例如chatgpt-4的体验空间</a></p>
</li>
<li><p>一些教程:<br>  <a href="https://github.com/ivon852/netlify-ivon-blog-comments/discussions/437">湾湾的教程</a></p>
</li>
</ul>
<blockquote class="blockquote-center">
<p>“Do one thing every day that scares you.” –Eleanor Roosevelt</p>

</blockquote>]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>ai绘画</tag>
        <tag>statble-diffusion</tag>
      </tags>
  </entry>
</search>
